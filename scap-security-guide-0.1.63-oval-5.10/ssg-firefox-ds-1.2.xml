<?xml version="1.0"?>
<ds:data-stream-collection xmlns:cat="urn:oasis:names:tc:entity:xmlns:xml:catalog" xmlns:cpe-dict="http://cpe.mitre.org/dictionary/2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ds="http://scap.nist.gov/schema/scap/source/1.2" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ind="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent" xmlns:linux="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux" xmlns:ocil="http://scap.nist.gov/schema/ocil/2.0" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:xccdf-1.2="http://checklists.nist.gov/xccdf/1.2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="scap_org.open-scap_collection_from_xccdf_ssg-firefox-xccdf-1.2.xml" schematron-version="1.2">
  <ds:data-stream id="scap_org.open-scap_datastream_from_xccdf_ssg-firefox-xccdf-1.2.xml" scap-version="1.2" use-case="OTHER">
    <ds:dictionaries>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-cpe-dictionary.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-cpe-dictionary.xml">
        <cat:catalog>
          <cat:uri name="ssg-firefox-cpe-oval.xml" uri="#scap_org.open-scap_cref_ssg-firefox-cpe-oval.xml"/>
        </cat:catalog>
      </ds:component-ref>
    </ds:dictionaries>
    <ds:checklists>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-xccdf-1.2.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-xccdf-1.2.xml">
        <cat:catalog>
          <cat:uri name="ssg-firefox-oval.xml" uri="#scap_org.open-scap_cref_ssg-firefox-oval.xml"/>
          <cat:uri name="ssg-firefox-ocil.xml" uri="#scap_org.open-scap_cref_ssg-firefox-ocil.xml"/>
        </cat:catalog>
      </ds:component-ref>
    </ds:checklists>
    <ds:checks>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-oval.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-oval.xml"/>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-ocil.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-ocil.xml"/>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-cpe-oval.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-cpe-oval.xml"/>
    </ds:checks>
  </ds:data-stream>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-cpe-dictionary.xml" timestamp="2022-07-29T18:57:41">
    <cpe-dict:cpe-list xsi:schemaLocation="http://cpe.mitre.org/dictionary/2.0 http://cpe.mitre.org/files/cpe-dictionary_2.1.xsd">
      <cpe-dict:cpe-item name="cpe:/a:mozilla:firefox">
        <cpe-dict:title xml:lang="en-us">Mozilla Firefox</cpe-dict:title>
        <cpe-dict:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5" href="ssg-firefox-cpe-oval.xml">oval:ssg-installed_app_is_firefox:def:1</cpe-dict:check>
      </cpe-dict:cpe-item>
    </cpe-dict:cpe-list>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-xccdf-1.2.xml" timestamp="2022-07-29T18:58:23">
    <xccdf-1.2:Benchmark id="xccdf_org.ssgproject.content_benchmark_FIREFOX" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.1 xccdf-1.1.4.xsd" style="SCAP_1.2" resolved="true" xml:lang="en-US">
      <xccdf-1.2:status date="2022-07-29">draft</xccdf-1.2:status>
      <xccdf-1.2:title>Guide to the Secure Configuration of Firefox</xccdf-1.2:title>
      <xccdf-1.2:description>This guide presents a catalog of security-relevant
configuration settings for Firefox. It is a rendering of
content structured in the eXtensible Configuration Checklist Description Format (XCCDF)
in order to support security automation.  The SCAP content is
is available in the <html:code>scap-security-guide</html:code> package which is developed at

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.
<html:br/><html:br/>
Providing system administrators with such guidance informs them how to securely
configure systems under their control in a variety of network roles. Policy
makers and baseline creators can use this catalog of settings, with its
associated references to higher-level security control catalogs, in order to
assist them in security baseline creation. This guide is a <html:em>catalog, not a
checklist</html:em>, and satisfaction of every item is not likely to be possible or
sensible in many operational scenarios. However, the XCCDF format enables
granular selection and adjustment of settings, and their association with OVAL
and OCIL content provides an automated checking capability. Transformations of
this document, and its associated automated checking content, are capable of
providing baselines that meet a diverse set of policy objectives. Some example
XCCDF <html:em>Profiles</html:em>, which are selections of items that form checklists and
can be used as baselines, are available with this guide. They can be
processed, in an automated fashion, with tools that support the Security
Content Automation Protocol (SCAP). The DISA STIG for Firefox,
which provides required settings for US Department of Defense systems, is
one example of a baseline created from this guidance.
</xccdf-1.2:description>
      <xccdf-1.2:notice id="terms_of_use">Do not attempt to implement any of the settings in
this guide without first testing them in a non-operational environment. The
creators of this guidance assume no responsibility whatsoever for its use by
other parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic.
</xccdf-1.2:notice>
      <xccdf-1.2:front-matter>The SCAP Security Guide Project<html:br/>

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>
</xccdf-1.2:front-matter>
      <xccdf-1.2:rear-matter>Red Hat and Red Hat Enterprise Linux are either registered
trademarks or trademarks of Red Hat, Inc. in the United States and other
countries. All other names are registered trademarks or trademarks of their
respective companies.
</xccdf-1.2:rear-matter>
      <xccdf-1.2:platform idref="cpe:/a:mozilla:firefox"/>
      <xccdf-1.2:version update="https://github.com/ComplianceAsCode/content/releases/latest">0.1.63</xccdf-1.2:version>
      <xccdf-1.2:metadata>
        <dc:publisher>SCAP Security Guide Project</dc:publisher>
        <dc:creator>SCAP Security Guide Project</dc:creator>
        <dc:contributor>Frank J Cameron (CAM1244) &lt;cameron@ctc.com&gt;</dc:contributor>
        <dc:contributor>0x66656c6978 &lt;0x66656c6978@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>H&#xE5;vard F. Aasen &lt;havard.f.aasen@pfft.no&gt;</dc:contributor>
        <dc:contributor>Jack Adolph &lt;jack.adolph@gmail.com&gt;</dc:contributor>
        <dc:contributor>Edgar Aguilar &lt;edgar.aguilar@oracle.com&gt;</dc:contributor>
        <dc:contributor>Gabe Alford &lt;redhatrises@gmail.com&gt;</dc:contributor>
        <dc:contributor>Firas AlShafei &lt;firas.alshafei@us.abb.com&gt;</dc:contributor>
        <dc:contributor>Rodrigo Alvares &lt;ralvares@redhat.com&gt;</dc:contributor>
        <dc:contributor>Christopher Anderson &lt;cba@fedoraproject.org&gt;</dc:contributor>
        <dc:contributor>angystardust &lt;angystardust@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>anivan-suse &lt;anastasija.ivanovic@suse.com&gt;</dc:contributor>
        <dc:contributor>anixon-rh &lt;55244503+anixon-rh@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Ikko Ashimine &lt;eltociear@gmail.com&gt;</dc:contributor>
        <dc:contributor>Chuck Atkins &lt;chuck.atkins@kitware.com&gt;</dc:contributor>
        <dc:contributor>ayfantis &lt;ayfantis@localhost.localdomain&gt;</dc:contributor>
        <dc:contributor>Ryan Ballanger &lt;root@rballang-admin-2.fastenal.com&gt;</dc:contributor>
        <dc:contributor>Alex Baranowski &lt;alex@euro-linux.com&gt;</dc:contributor>
        <dc:contributor>Eduardo Barretto &lt;eduardo.barretto@canonical.com&gt;</dc:contributor>
        <dc:contributor>Molly Jo Bault &lt;Molly.Jo.Bault@ballardtech.com&gt;</dc:contributor>
        <dc:contributor>Andrew Becker &lt;A-Beck@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Gabriel Becker &lt;ggasparb@redhat.com&gt;</dc:contributor>
        <dc:contributor>Alexander Bergmann &lt;abergmann@suse.com&gt;</dc:contributor>
        <dc:contributor>Dale Bewley &lt;dale@bewley.net&gt;</dc:contributor>
        <dc:contributor>Jose Luis BG &lt;bgjoseluis@gmail.com&gt;</dc:contributor>
        <dc:contributor>binyanling &lt;binyanling@uniontech.com&gt;</dc:contributor>
        <dc:contributor>Joseph Bisch &lt;joseph.bisch@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jeffrey Blank &lt;blank@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Olivier Bonhomme &lt;ptitoliv@ptitoliv.net&gt;</dc:contributor>
        <dc:contributor>Lance Bragstad &lt;lbragstad@gmail.com&gt;</dc:contributor>
        <dc:contributor>Ted Brunell &lt;tbrunell@redhat.com&gt;</dc:contributor>
        <dc:contributor>Marcus Burghardt &lt;maburgha@redhat.com&gt;</dc:contributor>
        <dc:contributor>Matthew Burket &lt;mburket@redhat.com&gt;</dc:contributor>
        <dc:contributor>Blake Burkhart &lt;blake.burkhart@us.af.mil&gt;</dc:contributor>
        <dc:contributor>Patrick Callahan &lt;pmc@patrickcallahan.com&gt;</dc:contributor>
        <dc:contributor>George Campbell &lt;gcampbell@palantir.com&gt;</dc:contributor>
        <dc:contributor>Nick Carboni &lt;ncarboni@redhat.com&gt;</dc:contributor>
        <dc:contributor>Carlos &lt;64919342+carlosmmatos@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>James Cassell &lt;james.cassell@ll.mit.edu&gt;</dc:contributor>
        <dc:contributor>Frank Caviggia &lt;fcaviggi@ra.iad.redhat.com&gt;</dc:contributor>
        <dc:contributor>Eric Christensen &lt;echriste@redhat.com&gt;</dc:contributor>
        <dc:contributor>Dan Clark &lt;danclark@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jayson Cofell &lt;1051437+70k10@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Caleb Cooper &lt;coopercd@ornl.gov&gt;</dc:contributor>
        <dc:contributor>Richard Maciel Costa &lt;richard.maciel.costa@canonical.com&gt;</dc:contributor>
        <dc:contributor>Deric Crago &lt;deric.crago@gmail.com&gt;</dc:contributor>
        <dc:contributor>crleekwc &lt;crleekwc@gmail.com&gt;</dc:contributor>
        <dc:contributor>cyarbrough76 &lt;42849651+cyarbrough76@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Maura Dailey &lt;maura@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Klaas Demter &lt;demter@atix.de&gt;</dc:contributor>
        <dc:contributor>dhanushkar-wso2 &lt;dhanushkar@wso2.com&gt;</dc:contributor>
        <dc:contributor>Andrew DiPrinzio &lt;andrew.diprinzio@jhuapl.edu&gt;</dc:contributor>
        <dc:contributor>dom &lt;dominique.blaze@devinci.fr&gt;</dc:contributor>
        <dc:contributor>Jean-Baptiste Donnette &lt;jean-baptiste.donnette@epita.fr&gt;</dc:contributor>
        <dc:contributor>Marco De Donno &lt;mdedonno1337@gmail.com&gt;</dc:contributor>
        <dc:contributor>dperrone &lt;dperrone@redhat.com&gt;</dc:contributor>
        <dc:contributor>drax &lt;applezip@gmail.com&gt;</dc:contributor>
        <dc:contributor>Sebastian Dunne &lt;sdunne@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fran&#xE7;ois Duthilleul &lt;francoisduthilleul@gmail.com&gt;</dc:contributor>
        <dc:contributor>Greg Elin &lt;gregelin@gitmachines.com&gt;</dc:contributor>
        <dc:contributor>eradot4027 &lt;jrtonmac@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alexis Facques &lt;alexis.facques@mythalesgroup.io&gt;</dc:contributor>
        <dc:contributor>Leah Fisher &lt;lfisher047@gmail.com&gt;</dc:contributor>
        <dc:contributor>Yavor Georgiev &lt;strandjata@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alijohn Ghassemlouei &lt;alijohn@secureagc.com&gt;</dc:contributor>
        <dc:contributor>Swarup Ghosh &lt;swghosh@redhat.com&gt;</dc:contributor>
        <dc:contributor>ghylock &lt;ghylock@gmail.com&gt;</dc:contributor>
        <dc:contributor>Andrew Gilmore &lt;agilmore2@gmail.com&gt;</dc:contributor>
        <dc:contributor>Joshua Glemza &lt;jglemza@nasa.gov&gt;</dc:contributor>
        <dc:contributor>Nick Gompper &lt;forestgomp@yahoo.com&gt;</dc:contributor>
        <dc:contributor>Loren Gordon &lt;lorengordon@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Patrik Greco &lt;sikevux@sikevux.se&gt;</dc:contributor>
        <dc:contributor>Steve Grubb &lt;sgrubb@redhat.com&gt;</dc:contributor>
        <dc:contributor>guangyee &lt;gyee@suse.com&gt;</dc:contributor>
        <dc:contributor>Marek Haicman &lt;mhaicman@redhat.com&gt;</dc:contributor>
        <dc:contributor>Vern Hart &lt;vern.hart@canonical.com&gt;</dc:contributor>
        <dc:contributor>Alex Haydock &lt;alex@alexhaydock.co.uk&gt;</dc:contributor>
        <dc:contributor>Rebekah Hayes &lt;rhayes@corp.rivierautilities.com&gt;</dc:contributor>
        <dc:contributor>Trey Henefield &lt;thenefield@gmail.com&gt;</dc:contributor>
        <dc:contributor>Henning Henkel &lt;henning.henkel@helvetia.ch&gt;</dc:contributor>
        <dc:contributor>hex2a &lt;hex2a@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>John Hooks &lt;jhooks@starscream.pa.jhbcomputers.com&gt;</dc:contributor>
        <dc:contributor>Jakub Hrozek &lt;jhrozek@redhat.com&gt;</dc:contributor>
        <dc:contributor>De Huo &lt;De.Huo@windriver.com&gt;</dc:contributor>
        <dc:contributor>Robin Price II &lt;robin@redhat.com&gt;</dc:contributor>
        <dc:contributor>Yasir Imam &lt;yimam@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jiri Jaburek &lt;jjaburek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Keith Jackson &lt;keithkjackson@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jeremiah Jahn &lt;jeremiah@goodinassociates.com&gt;</dc:contributor>
        <dc:contributor>Jakub Jelen &lt;jjelen@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jessicahfy &lt;Jessicahfy@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Stephan Joerrens &lt;Stephan.Joerrens@fiduciagad.de&gt;</dc:contributor>
        <dc:contributor>Hunter Jones &lt;hjones2199@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jono &lt;jono@ubuntu-18.localdomain&gt;</dc:contributor>
        <dc:contributor>justchris1 &lt;justchris1@justchris1.email&gt;</dc:contributor>
        <dc:contributor>Kai Kang &lt;kai.kang@windriver.com&gt;</dc:contributor>
        <dc:contributor>Charles Kernstock &lt;charles.kernstock@ultra-ats.com&gt;</dc:contributor>
        <dc:contributor>Yuli Khodorkovskiy &lt;ykhodorkovskiy@tresys.com&gt;</dc:contributor>
        <dc:contributor>Sherine Khoury &lt;skhoury@redhat.com&gt;</dc:contributor>
        <dc:contributor>Nathan Kinder &lt;nkinder@redhat.com&gt;</dc:contributor>
        <dc:contributor>Lee Kinser &lt;lee.kinser@gmail.com&gt;</dc:contributor>
        <dc:contributor>Evgeny Kolesnikov &lt;ekolesni@redhat.com&gt;</dc:contributor>
        <dc:contributor>Peter 'Pessoft' Kol&#xED;nek &lt;github@pessoft.com&gt;</dc:contributor>
        <dc:contributor>Luke Kordell &lt;luke.t.kordell@lmco.com&gt;</dc:contributor>
        <dc:contributor>Malte Kraus &lt;malte.kraus@suse.com&gt;</dc:contributor>
        <dc:contributor>Seth Kress &lt;seth.kress@dsainc.com&gt;</dc:contributor>
        <dc:contributor>Felix Krohn &lt;felix.krohn@helvetia.ch&gt;</dc:contributor>
        <dc:contributor>kspargur &lt;kspargur@kspargur.csb&gt;</dc:contributor>
        <dc:contributor>Amit Kumar &lt;amitkuma@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fen Labalme &lt;fen@civicactions.com&gt;</dc:contributor>
        <dc:contributor>Ade Lee &lt;alee@redhat.com&gt;</dc:contributor>
        <dc:contributor>Christopher Lee &lt;Crleekwc@gmail.com&gt;</dc:contributor>
        <dc:contributor>Ian Lee &lt;lee1001@llnl.gov&gt;</dc:contributor>
        <dc:contributor>Jarrett Lee &lt;jarrettl@umd.edu&gt;</dc:contributor>
        <dc:contributor>Joseph Lenox &lt;joseph.lenox@collins.com&gt;</dc:contributor>
        <dc:contributor>Jan Lieskovsky &lt;jlieskov@redhat.com&gt;</dc:contributor>
        <dc:contributor>Markus Linnala &lt;Markus.Linnala@knowit.fi&gt;</dc:contributor>
        <dc:contributor>&#x160;imon Luka&#x161;&#xED;k &lt;slukasik@redhat.com&gt;</dc:contributor>
        <dc:contributor>Milan Lysonek &lt;mlysonek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fredrik Lys&#xE9;n &lt;fredrik@pipemore.se&gt;</dc:contributor>
        <dc:contributor>Caitlin Macleod &lt;caitelatte@gmail.com&gt;</dc:contributor>
        <dc:contributor>Nick Maludy &lt;nmaludy@gmail.com&gt;</dc:contributor>
        <dc:contributor>Lokesh Mandvekar &lt;lsm5@fedoraproject.org&gt;</dc:contributor>
        <dc:contributor>Matus Marhefka &lt;mmarhefk@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jamie Lorwey Martin &lt;jlmartin@redhat.com&gt;</dc:contributor>
        <dc:contributor>Carlos Matos &lt;cmatos@redhat.com&gt;</dc:contributor>
        <dc:contributor>Robert McAllister &lt;rmcallis@redhat.com&gt;</dc:contributor>
        <dc:contributor>Karen McCarron &lt;kmccarro@redhat.com&gt;</dc:contributor>
        <dc:contributor>Michael McConachie &lt;michael@redhat.com&gt;</dc:contributor>
        <dc:contributor>Marcus Meissner &lt;meissner@suse.de&gt;</dc:contributor>
        <dc:contributor>Khary Mendez &lt;kmendez@redhat.com&gt;</dc:contributor>
        <dc:contributor>Rodney Mercer &lt;rmercer@harris.com&gt;</dc:contributor>
        <dc:contributor>mgjadoul &lt;mgjadoul@laptomatic.auth-o-matic.corp&gt;</dc:contributor>
        <dc:contributor>Matt Micene &lt;nzwulfin@gmail.com&gt;</dc:contributor>
        <dc:contributor>Brian Millett &lt;bmillett@gmail.com&gt;</dc:contributor>
        <dc:contributor>Takuya Mishina &lt;tmishina@jp.ibm.com&gt;</dc:contributor>
        <dc:contributor>Mixer9 &lt;35545791+Mixer9@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>mmosel &lt;mmosel@kde.example.com&gt;</dc:contributor>
        <dc:contributor>Zbynek Moravec &lt;zmoravec@redhat.com&gt;</dc:contributor>
        <dc:contributor>Kazuo Moriwaka &lt;moriwaka@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Michael Moseley &lt;michael@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Renaud M&#xE9;trich &lt;rmetrich@redhat.com&gt;</dc:contributor>
        <dc:contributor>Joe Nall &lt;joe@nall.com&gt;</dc:contributor>
        <dc:contributor>Neiloy &lt;neiloy@redhat.com&gt;</dc:contributor>
        <dc:contributor>Axel Nennker &lt;axel@nennker.de&gt;</dc:contributor>
        <dc:contributor>Michele Newman &lt;mnewman@redhat.com&gt;</dc:contributor>
        <dc:contributor>Sean O'Keeffe &lt;seanokeeffe797@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jiri Odehnal &lt;jodehnal@redhat.com&gt;</dc:contributor>
        <dc:contributor>Ilya Okomin &lt;ilya.okomin@oracle.com&gt;</dc:contributor>
        <dc:contributor>Kaustubh Padegaonkar &lt;theTuxRacer@gmail.com&gt;</dc:contributor>
        <dc:contributor>Michael Palmiotto &lt;mpalmiotto@tresys.com&gt;</dc:contributor>
        <dc:contributor>Eryx Paredes &lt;eryxp@lyft.com&gt;</dc:contributor>
        <dc:contributor>Max R.D. Parmer &lt;maxp@trystero.is&gt;</dc:contributor>
        <dc:contributor>Arnaud Patard &lt;apatard@hupstream.com&gt;</dc:contributor>
        <dc:contributor>Jan Pazdziora &lt;jpazdziora@redhat.com&gt;</dc:contributor>
        <dc:contributor>pcactr &lt;paul.c.arnold4.ctr@mail.mil&gt;</dc:contributor>
        <dc:contributor>Kenneth Peeples &lt;kennethwpeeples@gmail.com&gt;</dc:contributor>
        <dc:contributor>Nathan Peters &lt;Nathaniel.Peters@ca.com&gt;</dc:contributor>
        <dc:contributor>Frank Lin PIAT &lt;fpiat@klabs.be&gt;</dc:contributor>
        <dc:contributor>Stefan Pietsch &lt;mail.ipv4v6+gh@gmail.com&gt;</dc:contributor>
        <dc:contributor>piggyvenus &lt;piggyvenus@gmail.com&gt;</dc:contributor>
        <dc:contributor>Vojtech Polasek &lt;vpolasek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Orion Poplawski &lt;orion@nwra.com&gt;</dc:contributor>
        <dc:contributor>Nick Poyant &lt;npoyant@redhat.com&gt;</dc:contributor>
        <dc:contributor>Martin Preisler &lt;mpreisle@redhat.com&gt;</dc:contributor>
        <dc:contributor>Wesley Ceraso Prudencio &lt;wcerasop@redhat.com&gt;</dc:contributor>
        <dc:contributor>Raphael Sanchez Prudencio &lt;rsprudencio@redhat.com&gt;</dc:contributor>
        <dc:contributor>T.O. Radzy Radzykewycz &lt;radzy@windriver.com&gt;</dc:contributor>
        <dc:contributor>Kenyon Ralph &lt;kenyon@kenyonralph.com&gt;</dc:contributor>
        <dc:contributor>Mike Ralph &lt;mralph@redhat.com&gt;</dc:contributor>
        <dc:contributor>Federico Ramirez &lt;federico.r.ramirez@oracle.com&gt;</dc:contributor>
        <dc:contributor>rchikov &lt;rumen.chikov@suse.com&gt;</dc:contributor>
        <dc:contributor>Rick Renshaw &lt;Richard_Renshaw@xtoenergy.com&gt;</dc:contributor>
        <dc:contributor>Chris Reynolds &lt;c.reynolds82@gmail.com&gt;</dc:contributor>
        <dc:contributor>rhayes &lt;rhayes@rivierautilities.com&gt;</dc:contributor>
        <dc:contributor>Pat Riehecky &lt;riehecky@fnal.gov&gt;</dc:contributor>
        <dc:contributor>rlucente-se-jboss &lt;rlucente@redhat.com&gt;</dc:contributor>
        <dc:contributor>Juan Antonio Osorio Robles &lt;juan.osoriorobles@eu.equinix.com&gt;</dc:contributor>
        <dc:contributor>Matt Rogers &lt;mrogers@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jesse Roland &lt;jesse.roland@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>Joshua Roys &lt;roysjosh@gmail.com&gt;</dc:contributor>
        <dc:contributor>rrenshaw &lt;bofh69@yahoo.com&gt;</dc:contributor>
        <dc:contributor>Chris Ruffalo &lt;chris.ruffalo@gmail.com&gt;</dc:contributor>
        <dc:contributor>rumch-se &lt;77793453+rumch-se@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Ray Shaw (Cont ARL/CISD) rvshaw &lt;rvshaw@esme.arl.army.mil&gt;</dc:contributor>
        <dc:contributor>Earl Sampson &lt;ESampson@suse.com&gt;</dc:contributor>
        <dc:contributor>sampsone &lt;esampson@suse.com&gt;</dc:contributor>
        <dc:contributor>Willy Santos &lt;wsantos@redhat.com&gt;</dc:contributor>
        <dc:contributor>Nagarjuna Sarvepalli &lt;snagarju@redhat.com&gt;</dc:contributor>
        <dc:contributor>Anderson Sasaki &lt;33833274+ansasaki@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Gautam Satish &lt;gautams@hpe.com&gt;</dc:contributor>
        <dc:contributor>Watson Sato &lt;wsato@redhat.com&gt;</dc:contributor>
        <dc:contributor>Satoru SATOH &lt;satoru.satoh@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alexander Scheel &lt;ascheel@redhat.com&gt;</dc:contributor>
        <dc:contributor>Bryan Schneiders &lt;pschneiders@trisept.com&gt;</dc:contributor>
        <dc:contributor>shaneboulden &lt;shane.boulden@gmail.com&gt;</dc:contributor>
        <dc:contributor>Vincent Shen &lt;47534281+Vincent056@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Dhriti Shikhar &lt;dhriti.shikhar.rokz@gmail.com&gt;</dc:contributor>
        <dc:contributor>Spencer Shimko &lt;sshimko@tresys.com&gt;</dc:contributor>
        <dc:contributor>Mark Shoger &lt;mshoger@redhat.com&gt;</dc:contributor>
        <dc:contributor>THOBY Simon &lt;Simon.THOBY@viveris.fr&gt;</dc:contributor>
        <dc:contributor>Thomas Sj&#xF6;gren &lt;konstruktoid@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Francisco Slavin &lt;fslavin@tresys.com&gt;</dc:contributor>
        <dc:contributor>David Smith &lt;dsmith@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Kevin Spargur &lt;kspargur@redhat.com&gt;</dc:contributor>
        <dc:contributor>Kenneth Stailey &lt;kstailey.lists@gmail.com&gt;</dc:contributor>
        <dc:contributor>Leland Steinke &lt;leland.j.steinke.ctr@mail.mil&gt;</dc:contributor>
        <dc:contributor>Justin Stephenson &lt;jstephen@redhat.com&gt;</dc:contributor>
        <dc:contributor>Brian Stinson &lt;brian@bstinson.com&gt;</dc:contributor>
        <dc:contributor>Jake Stookey &lt;jakestookey@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jonathan Sturges &lt;jsturges@redhat.com&gt;</dc:contributor>
        <dc:contributor>Ian Tewksbury &lt;itewk@redhat.com&gt;</dc:contributor>
        <dc:contributor>Philippe Thierry &lt;phil@reseau-libre.net&gt;</dc:contributor>
        <dc:contributor>Derek Thurston &lt;thegrit@gmail.com&gt;</dc:contributor>
        <dc:contributor>tianzhenjia &lt;jiatianzhen@cmss.chinamobile.com&gt;</dc:contributor>
        <dc:contributor>Greg Tinsley &lt;gtinsley@redhat.com&gt;</dc:contributor>
        <dc:contributor>Paul Tittle &lt;ptittle@cmf.nrl.navy.mil&gt;</dc:contributor>
        <dc:contributor>tom &lt;tom@localhost.localdomain&gt;</dc:contributor>
        <dc:contributor>tomas.hudik &lt;tomas.hudik@embedit.cz&gt;</dc:contributor>
        <dc:contributor>Jeb Trayer &lt;jeb.d.trayer@uscg.mil&gt;</dc:contributor>
        <dc:contributor>TrilokGeer &lt;tgeer@redhat.com&gt;</dc:contributor>
        <dc:contributor>Viktors Trubovics &lt;viktors.trubovics@suse.com&gt;</dc:contributor>
        <dc:contributor>Nico Truzzolino &lt;nico.truzzolino@gmx.de&gt;</dc:contributor>
        <dc:contributor>Brian Turek &lt;brian.turek@gmail.com&gt;</dc:contributor>
        <dc:contributor>Mat&#x11B;j T&#xFD;&#x10D; &lt;matyc@redhat.com&gt;</dc:contributor>
        <dc:contributor>VadimDor &lt;29509093+VadimDor@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Trevor Vaughan &lt;tvaughan@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>vtrubovics &lt;82443408+vtrubovics@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Samuel Warren &lt;swarren@redhat.com&gt;</dc:contributor>
        <dc:contributor>wcushen &lt;54533890+wcushen@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Shawn Wells &lt;shawn@shawndwells.io&gt;</dc:contributor>
        <dc:contributor>Daniel E. White &lt;linuxdan@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Bernhard M. Wiedemann &lt;bwiedemann@suse.de&gt;</dc:contributor>
        <dc:contributor>Roy Williams &lt;roywilli@roywilli.redhat.com&gt;</dc:contributor>
        <dc:contributor>Willumpie &lt;willumpie@xs4all.nl&gt;</dc:contributor>
        <dc:contributor>Rob Wilmoth &lt;rwilmoth@redhat.com&gt;</dc:contributor>
        <dc:contributor>Lucas Yamanishi &lt;lucas.yamanishi@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>Xirui Yang &lt;xirui.yang@oracle.com&gt;</dc:contributor>
        <dc:contributor>yarunachalam &lt;yarunachalam@suse.com&gt;</dc:contributor>
        <dc:contributor>Guang Yee &lt;guang.yee@suse.com&gt;</dc:contributor>
        <dc:contributor>Achilleas John Yfantis &lt;ayfantis@redhat.com&gt;</dc:contributor>
        <dc:contributor>YiLin.Li &lt;YiLin.Li@linux.alibaba.com&gt;</dc:contributor>
        <dc:contributor>YuQing &lt;yyq0391@163.com&gt;</dc:contributor>
        <dc:contributor>Kevin Zimmerman &lt;kevin.zimmerman@kitware.com&gt;</dc:contributor>
        <dc:contributor>Luigi Mario Zuccarelli &lt;luzuccar@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jan &#x10C;ern&#xFD; &lt;jcerny@redhat.com&gt;</dc:contributor>
        <dc:contributor>Michal &#x160;ruba&#x159; &lt;msrubar@redhat.com&gt;</dc:contributor>
        <dc:source>https://github.com/ComplianceAsCode/content/releases/latest</dc:source>
      </xccdf-1.2:metadata>
      <xccdf-1.2:Profile id="xccdf_org.ssgproject.content_profile_stig">
        <xccdf-1.2:title override="true">Upstream Firefox STIG</xccdf-1.2:title>
        <xccdf-1.2:description override="true">This profile is developed under the DoD consensus model and DISA FSO Vendor STIG process,
serving as the upstream development environment for the Firefox STIG.

As a result of the upstream/downstream relationship between the SCAP Security Guide project
and the official DISA FSO STIG baseline, users should expect variance between SSG and DISA FSO content.
For official DISA FSO STIG content, refer to https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance.

While this profile is packaged by Red Hat as part of the SCAP Security Guide package, please note
that commercial support of this SCAP content is NOT available. This profile is provided as example
SCAP content with no endorsement for suitability or production readiness. Support for this
profile is provided by the upstream SCAP Security Guide community on a best-effort basis. The
upstream project homepage is https://www.open-scap.org/security-policies/scap-security-guide/.</xccdf-1.2:description>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-addons_plugin_updates" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_forms" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_passwords" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-background_data" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-cryptomining" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-development_tools" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-disable_ssl_weak_ciphers" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-enhanced_tracking" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-extension_recommendation" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-fingerprinting-protection" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-install_extensions" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_context_menus" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_changes" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_resizing" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_config_file" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_obscure" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-open_confirmation" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-password_store" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-pop-up_windows" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-search_update" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-shell_protocol" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_protocol_tls" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-telemetry" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-telemetry-archive" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-verification" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_group_firefox_preferences-cookies" selected="false"/>
        <xccdf-1.2:refine-value idref="xccdf_org.ssgproject.content_value_var_default_home_page" selector="about_blank"/>
      </xccdf-1.2:Profile>
      <xccdf-1.2:Group id="xccdf_org.ssgproject.content_group_firefox">
        <xccdf-1.2:title>Firefox</xccdf-1.2:title>
        <xccdf-1.2:description>Firefox is an open-source web browser and developed by Mozilla.
Web browsers such as Firefox are used for a number of reasons. This section
provides settings for configuring Firefox policies to meet compliance
settings for Firefox running on Red Hat Enterprise Linux systems.

<html:ul>Refer to <html:li><html:a href="http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries">http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries</html:a></html:li>
for a list of currently supported Firefox settings.</html:ul></xccdf-1.2:description>
        <xccdf-1.2:Value id="xccdf_org.ssgproject.content_value_var_default_home_page" type="string">
          <xccdf-1.2:title>The Default Firefox Home Page</xccdf-1.2:title>
          <xccdf-1.2:description>The default home page for Firefox users.</xccdf-1.2:description>
          <xccdf-1.2:value selector="about_blank">about:blank</xccdf-1.2:value>
          <xccdf-1.2:value>None</xccdf-1.2:value>
        </xccdf-1.2:Value>
        <xccdf-1.2:Value id="xccdf_org.ssgproject.content_value_var_required_file_types" type="string">
          <xccdf-1.2:title>The Default Required Firefox File Types</xccdf-1.2:title>
          <xccdf-1.2:description>The default required file types that need to request usage
confirmation in Firefox.</xccdf-1.2:description>
          <xccdf-1.2:value>application/pdf,application/fdf,application/xfdf,application/lsl,application/lso,application/lss,application/iqy,application/rqy,application/xlk,application/xls,application/xlt,application/pot,application/pps,application/ppt,application/dos,application/dot,application/wks,application/bat,application/ps,application/eps,application/wch,application/wcm,application/wb1,application/wb3,application/rtf,application/doc,application/mdb,application/mde,application/wbk,application/ad,application/adp</xccdf-1.2:value>
        </xccdf-1.2:Value>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-addons_plugin_updates" severity="medium">
          <xccdf-1.2:title>Disable Addons Plugin Updates</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox automatically updates installed add-ons and plugins which 
can be disabled by setting <html:code>extensions.update.enabled</html:code> to
<html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000005</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Automatic updates from untrusted sites puts the enclave at
risk of attack and may override security settings.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-addons_plugin_updates">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("extensions.update.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("extensions.update.enabled".*/lockPref("extensions.update.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("extensions.update.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-addons_plugin_updates:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-addons_plugin_updates_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" severity="medium">
          <xccdf-1.2:title>Disable Automatic Downloads of MIME Types</xccdf-1.2:title>
          <xccdf-1.2:description>MIME type files are automatically downloaded or executed in Firefox. This
can be disabled by setting <html:code>browser.helperApps.alwaysAsk.force</html:code> to
<html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001242</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-3</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF100</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/srg-stig-tools/">SV-223156r612236_rule</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The default action for file types for which a plugin is installed is to
automatically download and execute the file using the associated plugin.
Firefox allows users to change the specified download action so that the
file is opened with a selected external application or saved to disk
instead.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-auto-download_actions">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("browser.helperApps.alwaysAsk.force", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("browser.helperApps.alwaysAsk.force".*/lockPref("browser.helperApps.alwaysAsk.force", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("browser.helperApps.alwaysAsk.force", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-auto-download_actions:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-update_of_firefox" severity="medium">
          <xccdf-1.2:title>Disable Firefox Auto-Update Capability</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox can be set to automatically update as new updates. This can be
disabled by setting <html:code>app.update.enable</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF080</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Allowing software updates from non-trusted sites can introduce settings
that will override a secured installation of the application. This can
place DoD information at risk. If this setting is enabled, then there are
many other default settings which point to untrusted sites which must be
changed to point to an authorized update site that is not publicly accessible.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-auto-update_of_firefox">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("app.update.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("app.update.enabled".*/lockPref("app.update.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("app.update.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-auto-update_of_firefox:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-auto-update_of_firefox_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_forms" severity="medium">
          <xccdf-1.2:title>Disable Autofill Form Assistance</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox provides tools to auto-fill forms from prefilled information.
This can be disabled by setting <html:code>browser.formfill.enable</html:code> to
<html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000007</xccdf-1.2:reference>
          <xccdf-1.2:rationale>In order to protect privacy and sensitive data, Firefox provides
the ability to configure Firefox such that data entered into forms
is not saved. This mitigates the risk of a website gleaning private
information from prefilled information.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-autofill_forms">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("browser.formfill.enable", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("browser.formfill.enable".*/lockPref("browser.formfill.enable", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("browser.formfill.enable", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-autofill_forms:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-autofill_forms_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_passwords" severity="medium">
          <xccdf-1.2:title>Disable User Ability To Autofill Passwords</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox automatically allows users to save passwords to be auto-filled
into password forms. This can be disabled by setting
<html:code>signon.autofillForms</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000008</xccdf-1.2:reference>
          <xccdf-1.2:rationale>While on the internet, it may be possible for an attacker to view
the saved password files and gain access to the user's accounts on
various hosts.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-autofill_passwords">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("signon.autofillForms", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("signon.autofillForms".*/lockPref("signon.autofillForms", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("signon.autofillForms", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-autofill_passwords:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-autofill_passwords_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-background_data" severity="medium">
          <xccdf-1.2:title>Disable Background Information Submission</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox submits usage data in the background to Mozilla and posts portions of the data publicly.
This can be disabled by setting <html:code>datareporting.policy.dataSubmissionEnabled</html:code> to
<html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>In order to protect privacy and sensitive data, Mozilla provides
the ability to configure Firefox so that no data is submited to Mozilla. 
This mitigates the risk of potentially compromizing information becoming publicly available.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-background_data">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("datareporting.policy.dataSubmissionEnabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("datareporting.policy.dataSubmissionEnabled".*/lockPref("datareporting.policy.dataSubmissionEnabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("datareporting.policy.dataSubmissionEnabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-background_data:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-background_data_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-cryptomining" severity="medium">
          <xccdf-1.2:title>Enabled Firefox Cryptomining protection</xccdf-1.2:title>
          <xccdf-1.2:description>Cryptomining protection may be enabled by setting
<html:code>privacy.trackingprotection.cryptomining.enabled</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000024</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Content Blocking/Tracking Protection feature stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the tracker lists you set Firefox to use, then the fingerprinting script (or other tracking script/image) will not be loaded from that site.
Cryptomining scripts use your computer&#x2019;s central processing unit (CPU) to invisibly mine cryptocurrency.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-cryptomining">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("privacy.trackingprotection.cryptomining.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("privacy.trackingprotection.cryptomining.enabled".*/lockPref("privacy.trackingprotection.cryptomining.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("privacy.trackingprotection.cryptomining.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-cryptomining:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-cryptomining_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-development_tools" severity="low">
          <xccdf-1.2:title>Disable Firefox Development Tools</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox provides development tools which identify detailed information 
about the browser and its configuration. These details are often also 
recorded into a log file, giving an attacker the ability to capture 
detailed information about the system.
This can be disabled by setting <html:code>devtools.policy.disabled</html:code> to
<html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001312</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-11 b</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000015</xccdf-1.2:reference>
          <xccdf-1.2:rationale>In order to protect privacy and sensitive data, Mozilla provides
the ability to configure Firefox so that development tools are prevented from being used.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-development_tools">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("devtools.policy.disabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("devtools.policy.disabled".*/lockPref("devtools.policy.disabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("devtools.policy.disabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-development_tools:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-development_tools_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-disable_ssl_weak_ciphers" severity="medium">
          <xccdf-1.2:title>Disable Weak Ciphers in Firefox SSL</xccdf-1.2:title>
          <xccdf-1.2:description>Extension recommendations may be disabled by setting
<html:code>security.ssl3.rsa_des_ede3_sha</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000027</xccdf-1.2:reference>
          <xccdf-1.2:rationale>A weak cipher is defined as an encryption/decryption algorithm that uses a key of insufficient length. Using an insufficient length for a key in an encryption/decryption algorithm opens up the possibility (or probability) that the encryption scheme could be broken.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-disable_ssl_weak_ciphers">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.ssl3.rsa_des_ede3_sha", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.ssl3.rsa_des_ede3_sha".*/lockPref("security.ssl3.rsa_des_ede3_sha", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.ssl3.rsa_des_ede3_sha", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-disable_ssl_weak_ciphers:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-disable_ssl_weak_ciphers_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-enhanced_tracking" severity="medium">
          <xccdf-1.2:title>Enabled Firefox Enhanced Tracking Protection</xccdf-1.2:title>
          <xccdf-1.2:description>Enhanced Tracking Protection may be enabled by setting
<html:code>browser.contentblocking.category</html:code> to <html:code>strict</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000025</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Tracking generally refers to content, cookies, or scripts that can collect your browsing data across multiple sites.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-enhanced_tracking">

firefox_cfg="mozilla.cfg"
value="strict"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("browser.contentblocking.category", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("browser.contentblocking.category".*/lockPref("browser.contentblocking.category", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("browser.contentblocking.category", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-enhanced_tracking:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-enhanced_tracking_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-extension_recommendation" severity="medium">
          <xccdf-1.2:title>Disabled Firefox Extension Recommendations</xccdf-1.2:title>
          <xccdf-1.2:description>Extension recommendations may be disabled by setting
<html:code>extensions.htmlaboutaddons.recommendations.enabled</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000026</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Recommended Extensions program will make it easier for users to discover extensions that have been reviewed for security, functionality, and user experience.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-extension_recommendation">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("extensions.htmlaboutaddons.recommendations.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("extensions.htmlaboutaddons.recommendations.enabled".*/lockPref("extensions.htmlaboutaddons.recommendations.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("extensions.htmlaboutaddons.recommendations.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-extension_recommendation:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-extension_recommendation_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-fingerprinting-protection" severity="medium">
          <xccdf-1.2:title>Enabled Firefox Fingerprinting Protection</xccdf-1.2:title>
          <xccdf-1.2:description>Fingerprinting protection may be enabled by setting
<html:code>privacy.trackingprotection.fingerprinting.enabled</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000023</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Content Blocking/Tracking Protection feature stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the tracker lists you set Firefox to use, then the fingerprinting script (or other tracking script/image) will not be loaded from that site.
Fingerprinting scripts collect information about your browser and device configuration, such as your operating system, screen resolution, and other settings. By compiling these pieces of data, fingerprinters create a unique profile of you that can be used to track you around the Web.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-fingerprinting-protection">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("privacy.trackingprotection.fingerprinting.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("privacy.trackingprotection.fingerprinting.enabled".*/lockPref("privacy.trackingprotection.fingerprinting.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("privacy.trackingprotection.fingerprinting.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-fingerprinting-protection:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-fingerprinting-protection_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-home_page" severity="medium">
          <xccdf-1.2:title>Default Firefox Home Page Configured</xccdf-1.2:title>
          <xccdf-1.2:description>The default home page is set to a vendor's defined website or
Firefox's own website. This can be changed to an organizationally defined website
or <html:code>about:blank</html:code>. To set the default home page, set
<html:code>browser.startup.homepage</html:code> to <html:code><xccdf-1.2:sub idref="xccdf_org.ssgproject.content_value_var_default_home_page" use="legacy"/></html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF017</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The browser home page parameter specifies the web page that is to be
displayed when the browser is started explicitly and when product-specific
buttons or key sequences for the home page are accessed. This helps to
mitigate the possibility of automatic inadvertent execution of scripts 
added to a previously safe site.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-home_page">
var_default_home_page='<xccdf-1.2:sub idref="xccdf_org.ssgproject.content_value_var_default_home_page" use="legacy"/>'



firefox_cfg="mozilla.cfg"
value="\"${var_default_home_page}\""
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("browser.startup.homepage", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("browser.startup.homepage".*/lockPref("browser.startup.homepage", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("browser.startup.homepage", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-export export-name="oval:ssg-var_default_home_page:var:1" value-id="xccdf_org.ssgproject.content_value_var_default_home_page"/>
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-home_page:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-home_page_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-install_extensions" severity="medium">
          <xccdf-1.2:title>Disable Extension Installation</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox provides the ability to disable the installation of extensions.
This can be disabled by setting <html:code>xpinstall.enabled</html:code> to
<html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000013</xccdf-1.2:reference>
          <xccdf-1.2:rationale>If a browser is configured to allow unrestricted use of extensions then 
plug-ins can be loaded and installed from malicious sources and used on 
the browser.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-install_extensions">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("xpinstall.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("xpinstall.enabled".*/lockPref("xpinstall.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("xpinstall.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-install_extensions:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-install_extensions_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_context_menus" severity="medium">
          <xccdf-1.2:title>Disable JavaScript Context Menus</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically disabling or replacing context menus. This can be disabled by
setting <html:code>dom.event.contextmenu.enabled</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000012</xccdf-1.2:reference>
          <xccdf-1.2:rationale>A website may execute JavaScript that can make changes to these
context menus. This can help disguise an attack.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-javascript_context_menus">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("dom.event.contextmenu.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("dom.event.contextmenu.enabled".*/lockPref("dom.event.contextmenu.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("dom.event.contextmenu.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-javascript_context_menus:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-javascript_context_menus_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_status_bar_changes" severity="medium">
          <xccdf-1.2:title>Disable JavaScript's Ability To Change The Status Bar</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically hiding or changing the status bar. This can be disabled by
setting <html:code>dom.disable_window_status_change</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF184</xccdf-1.2:reference>
          <xccdf-1.2:rationale>When a user visits some webpages, JavaScript can hide or make changes
to the browser&#x2019;s appearance to hide unauthorized activity. This activity
can help disguise an attack taking place in a minimized background window.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-javascript_status_bar_changes">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("dom.disable_window_status_change", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("dom.disable_window_status_change".*/lockPref("dom.disable_window_status_change", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("dom.disable_window_status_change", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-javascript_status_bar_changes:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-javascript_status_bar_changes_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_status_bar_text" severity="medium">
          <xccdf-1.2:title>Disable JavaScript's Ability To Modify The Browser Appearance</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically hiding the status bar from view. This can disabled by 
setting <html:code>dom.disable_window_open_feature.status</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF185</xccdf-1.2:reference>
          <xccdf-1.2:rationale>JavaScript can make changes to the browser&#x2019;s appearance. This activity
can help disguise an attack taking place in a minimized background window.
Webpage authors can disable many features of a popup window that they open.
This setting prevents the status bar from being hidden.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-javascript_status_bar_text">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("dom.disable_window_open_feature.status", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("dom.disable_window_open_feature.status".*/lockPref("dom.disable_window_open_feature.status", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("dom.disable_window_open_feature.status", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-javascript_status_bar_text:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-javascript_status_bar_text_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_changes" severity="medium">
          <xccdf-1.2:title>Disable JavaScript's Raise Or Lower Windows Capability</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically raising and lowering windows. This can be disabled by
setting <html:code>dom.disable_window_flip</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000011</xccdf-1.2:reference>
          <xccdf-1.2:rationale>JavaScript can make changes to the browser&#x2019;s appearance. Allowing a website
to use JavaScript to raise and lower browser windows may disguise an attack.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-javascript_window_changes">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("dom.disable_window_flip", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("dom.disable_window_flip".*/lockPref("dom.disable_window_flip", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("dom.disable_window_flip", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-javascript_window_changes:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-javascript_window_changes_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_resizing" severity="medium">
          <xccdf-1.2:title>Disable JavaScript's Moving Or Resizing Windows Capability</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically moving and resizing browser windows. This can be disabled by
setting <html:code>dom.disable_window_move_resize</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000010</xccdf-1.2:reference>
          <xccdf-1.2:rationale>JavaScript can make changes to the browser&#x2019;s appearance. This activity
can help disguise an attack taking place in a minimized background window.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-javascript_window_resizing">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("dom.disable_window_move_resize", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("dom.disable_window_move_resize".*/lockPref("dom.disable_window_move_resize", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("dom.disable_window_move_resize", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-javascript_window_resizing:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-javascript_window_resizing_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-non-secure_page_warning" severity="medium">
          <xccdf-1.2:title>Enable Non-Secure Page Warnings</xccdf-1.2:title>
          <xccdf-1.2:description>When users browse websites, web pages can switch in between secure and 
non-secure protocols. Users can be warned each time by
setting <html:code>security.warn_leaving_secure</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF130</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Users may not be aware that the information being viewed under secure
conditions in a previous page are not currently being viewed under
the same security settings.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-non-secure_page_warning">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.warn_leaving_secure", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.warn_leaving_secure".*/lockPref("security.warn_leaving_secure", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.warn_leaving_secure", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-non-secure_page_warning:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-non-secure_page_warning_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-open_confirmation" severity="medium">
          <xccdf-1.2:title>Enable Downloading and Opening File Confirmation</xccdf-1.2:title>
          <xccdf-1.2:description>To have an action dialog box appear promping users what action to take when
certain types of files are downloaded or opened, set
<html:code>plugin.disable_full_page_plugin_for_types</html:code> to
<html:code><xccdf-1.2:sub idref="xccdf_org.ssgproject.content_value_var_required_file_types" use="legacy"/></html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001243</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-3</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF110</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/srg-stig-tools/">SV-223158r612236_rule</xccdf-1.2:reference>
          <xccdf-1.2:rationale>When the user receives a dialog box asking if they want to save the file
or open it with a specified application, this indicates that a plugin does
not exist. Also, the user has not previously selected a download action or helper
application to automatically use for that type of file. When prompted, if the user
checks the option to 'Do this automatically for files like this from now on', then
an entry will appear for that type of file in the plugins listing, and this file
type is automatically opened in the future. This can be a security issue. New file
types cannot be added directly to the Application plugin listing.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-open_confirmation">
var_required_file_types='<xccdf-1.2:sub idref="xccdf_org.ssgproject.content_value_var_required_file_types" use="legacy"/>'



firefox_cfg="mozilla.cfg"
value="\"${var_required_file_types}\""
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("plugin.disable_full_page_plugin_for_types", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's|lockPref("plugin.disable_full_page_plugin_for_types".*|lockPref("plugin.disable_full_page_plugin_for_types", '"$value)"';|g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("plugin.disable_full_page_plugin_for_types", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-export export-name="oval:ssg-var_required_file_types:var:1" value-id="xccdf_org.ssgproject.content_value_var_required_file_types"/>
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-open_confirmation:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-open_confirmation_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-password_store" severity="medium">
          <xccdf-1.2:title>Disable the Firefox Password Store</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox allows users to store passwords whether or not a master password
is set for the password store. To disable the storing of passwords, set
<html:code>signon.rememberSignons</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF160</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/srg-stig-tools/">SV-223162r612236_rule</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Autofill of a password can be enabled when a site is visited. This feature could also
be used to autofill the certificate pin which could lead to compromise of DoD information.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-password_store">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("signon.rememberSignons", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("signon.rememberSignons".*/lockPref("signon.rememberSignons", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("signon.rememberSignons", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-password_store:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-password_store_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-pop-up_windows" severity="medium">
          <xccdf-1.2:title>Enable Firefox Pop-up Blocker</xccdf-1.2:title>
          <xccdf-1.2:description>The pop-up blocker can be enabled by setting
<html:code>dom.disable_window_open_feature.status</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000009</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Popup windows may be used to launch an attack within a new browser window
with altered settings.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-pop-up_windows">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("dom.disable_window_open_feature.status", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("dom.disable_window_open_feature.status".*/lockPref("dom.disable_window_open_feature.status", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("dom.disable_window_open_feature.status", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-pop-up_windows:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-pop-up_windows_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-search_update" severity="medium">
          <xccdf-1.2:title>Disable Installed Search Plugins Update Checking</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox automatically checks for updated versions of search plugins.
To disable the automatic updates of plugins, set
<html:code>browser.search.update</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000004</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Updates need to be controlled and installed from authorized and trusted servers.
This setting overrides a number of other settings which may direct the application
to access external URLs.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-search_update">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("browser.search.update", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("browser.search.update".*/lockPref("browser.search.update", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("browser.search.update", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-search_update:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-search_update_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-shell_protocol" severity="medium">
          <xccdf-1.2:title>Disable Firefox Access to Shell Protocols</xccdf-1.2:title>
          <xccdf-1.2:description>Access to the shell is disabled by default but can be changed.
To prevent shell access from being enabled, set
<html:code>network.protocol-handler.external.shell</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF105</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/srg-stig-tools/">SV-223157r612236_rule</xccdf-1.2:reference>
          <xccdf-1.2:rationale>If enabled, this setting would allow the browser to access the Windows shell.
This could allow access to the underlying system.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-shell_protocol">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("network.protocol-handler.external.shell", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("network.protocol-handler.external.shell".*/lockPref("network.protocol-handler.external.shell", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("network.protocol-handler.external.shell", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-shell_protocol:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-shell_protocol_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_protocol_tls" severity="medium">
          <xccdf-1.2:title>Enable TLS Usage in Firefox</xccdf-1.2:title>
          <xccdf-1.2:description>To enable TLS, set <html:code>security.tls.version.min</html:code> to <html:code>2</html:code> and set <html:code>security.tls.version.max</html:code> to <html:code>4</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-002450</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-17 (2)</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000002</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Earlier versions of SSL have known security vulnerabilities and are not
authorized for use in DOD environments.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-ssl_protocol_tls">

firefox_cfg="mozilla.cfg"
value="2"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.tls.version.min", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.tls.version.min".*/lockPref("security.tls.version.min", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.tls.version.min", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done

firefox_cfg="mozilla.cfg"
value="4"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.tls.version.max", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.tls.version.max".*/lockPref("security.tls.version.max", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.tls.version.max", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-ssl_protocol_tls:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-ssl_protocol_tls_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_version_2" severity="medium">
          <xccdf-1.2:title>Disable SSL Version 2.0 in Firefox</xccdf-1.2:title>
          <xccdf-1.2:description>SSL version 2 is not enabled by default and should not be enabled.
To prevent SSL version 2 from being enabled set
<html:code>security.enable_ssl2</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF010</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Use of versions prior to TLS 1.0 are not permitted because these versions are
non-standard. SSL 2.0 and SSL 3.0 contain a number of security flaws.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-ssl_version_2">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.enable_ssl2", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.enable_ssl2".*/lockPref("security.enable_ssl2", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.enable_ssl2", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-ssl_version_2:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-ssl_version_2_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_version_3" severity="medium">
          <xccdf-1.2:title>Disable SSL Version 3.0 in Firefox</xccdf-1.2:title>
          <xccdf-1.2:description>SSL version 3.0 is vulnerable and should be disabled by setting
<html:code>security.enable_ssl3</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF020</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Earlier versions of SSL have known security vulnerabilities and are not
authorized for use in DOD.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-ssl_version_3">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.enable_ssl3", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.enable_ssl3".*/lockPref("security.enable_ssl3", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.enable_ssl3", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-ssl_version_3:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-ssl_version_3_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-telemetry" severity="medium">
          <xccdf-1.2:title>Disable Firefox Telemetry</xccdf-1.2:title>
          <xccdf-1.2:description>Telemetry can be disabled by setting
<html:code>toolkit.telemetry.enabled</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000014</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Telemetry feature provides this capability by sending performance and usage info to Mozilla. As you use Firefox, Telemetry measures and collects non-personal information, such as performance, hardware, usage and customizations. It then sends this information to Mozilla on a daily basis and we use it to improve Firefox</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-telemetry">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("toolkit.telemetry.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("toolkit.telemetry.enabled".*/lockPref("toolkit.telemetry.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("toolkit.telemetry.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-telemetry:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-telemetry_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-telemetry-archive" severity="medium">
          <xccdf-1.2:title>Disable Firefox Telemetry Archive</xccdf-1.2:title>
          <xccdf-1.2:description>Telemetry can be disabled by setting
<html:code>toolkit.telemetry.archive.enabled</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF205</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/srg-stig-tools/">SV-223171r612236_rule</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Telemetry feature provides this capability by sending performance and usage info to Mozilla. As you use Firefox, Telemetry measures and collects non-personal information, such as performance, hardware, usage and customizations. It then sends this information to Mozilla on a daily basis and we use it to improve Firefox</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-telemetry-archive">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("toolkit.telemetry.archive.enabled", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("toolkit.telemetry.archive.enabled".*/lockPref("toolkit.telemetry.archive.enabled", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("toolkit.telemetry.archive.enabled", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-telemetry-archive:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-telemetry-archive_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-verification" severity="medium">
          <xccdf-1.2:title>Enable Certificate Verification</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox can be configured to prompt the user to choose a certificate
to present to a website when asked. To enable certificate verification, 
set <html:code>security.default_personal_cert</html:code> to <html:code>Ask Every Time</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001274</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000003</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Websites within DoD require user authentication for access which increases
security for DoD information. Access will be denied to the user if
certificate management is not configured.</xccdf-1.2:rationale>
          <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-verification">

firefox_cfg="mozilla.cfg"
value="\"Ask Every Time\""
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("security.default_personal_cert", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("security.default_personal_cert".*/lockPref("security.default_personal_cert", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("security.default_personal_cert", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-verification:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-verification_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" severity="high">
          <xccdf-1.2:title>Supported Version of Firefox Installed</xccdf-1.2:title>
          <xccdf-1.2:description>If the system is joined to the Red Hat Network, a Red Hat Satellite Server,
or a yum server, run the following command to install updates:
<html:pre>$ sudo yum update</html:pre>
If the system is not configured to use one of these sources, updates (in the form of RPM packages)
can be manually downloaded and installed using <html:code>rpm</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-003376</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SA-22</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000001</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Use of versions of an application which are not supported by the vendor
are not permitted. Vendors respond to security flaws with updates and
patches. These updates are not available for unsupported version which
can leave the application vulnerable to attack.</xccdf-1.2:rationale>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-installed_firefox_version_supported:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Group id="xccdf_org.ssgproject.content_group_firefox_preferences-cookies">
          <xccdf-1.2:title>Clearing Cookies And Other Data</xccdf-1.2:title>
          <xccdf-1.2:description>Browser preferences should be set to perform a Clear Private Data
operation when closing the browser in order to clear cookies and other
data installed by websites visited during the session.</xccdf-1.2:description>
          <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-cookies_clear" severity="medium">
            <xccdf-1.2:title>Clear Data When Firefox Closes</xccdf-1.2:title>
            <xccdf-1.2:description>When a user browses to a website, cookies and other types of data
get stored on the system. This can be disabled by setting
<html:code>privacy.sanitize.sanitizeOnShutdown</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF170</xccdf-1.2:reference>
            <xccdf-1.2:rationale>Cookies can help websites perform better but can also be part of spyware.
To mitigate this risk, set browser preferences to perform a Clear Private
Data operation when closing the browser in order to clear cookies and
other data installed by websites visited during the session.</xccdf-1.2:rationale>
            <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-cookies_clear">

firefox_cfg="mozilla.cfg"
value="true"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("privacy.sanitize.sanitizeOnShutdown", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("privacy.sanitize.sanitizeOnShutdown".*/lockPref("privacy.sanitize.sanitizeOnShutdown", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("privacy.sanitize.sanitizeOnShutdown", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
            <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-cookies_clear:def:1"/>
            </xccdf-1.2:check>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-cookies_clear_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
          <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-cookies_user_notice" severity="medium">
            <xccdf-1.2:title>Disable User Prompt When Data Is Cleared</xccdf-1.2:title>
            <xccdf-1.2:description>By default, users are asked if it is okay to clear out cookies and data
when Firefox closes. This can be disabled by 
setting <html:code>privacy.sanitize.promptOnSanitize</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF170</xccdf-1.2:reference>
            <xccdf-1.2:rationale>Cookies can help websites perform better but can also be part of spyware.
To mitigate this risk, set browser preferences to perform a Clear Private
Data operation when closing the browser in order to clear cookies and
other data installed by websites visited during the session.</xccdf-1.2:rationale>
            <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-cookies_user_notice">

firefox_cfg="mozilla.cfg"
value="false"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Make sure the Firefox .cfg file exists and has the appropriate permissions
        if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
            echo "//  IMPORTANT: Start your code on the 2nd line" &gt; "${firefox_dir}/${firefox_cfg}"
            chmod 644 "${firefox_dir}/${firefox_cfg}"
        elif ! head -1 "${firefox_dir}/${firefox_cfg}" | grep -q "^//"; then
            sed -i '1 i\// IMPORTANT: Start your code on the 2nd line' "${firefox_dir}/${firefox_cfg}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^lockPref("privacy.sanitize.promptOnSanitize", ' "${firefox_dir}/${firefox_cfg}"; then
            
            sed -i 's/lockPref("privacy.sanitize.promptOnSanitize".*/lockPref("privacy.sanitize.promptOnSanitize", '"$value)"';/g' "${firefox_dir}/${firefox_cfg}"
        else
            echo 'lockPref("privacy.sanitize.promptOnSanitize", '"$value"');' &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        fi
    fi
done
</xccdf-1.2:fix>
            <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-cookies_user_notice:def:1"/>
            </xccdf-1.2:check>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-cookies_user_notice_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
        </xccdf-1.2:Group>
        <xccdf-1.2:Group id="xccdf_org.ssgproject.content_group_firefox_preferences-dod_root_certificate">
          <xccdf-1.2:title>The DoD Root Certificate Is Required</xccdf-1.2:title>
          <xccdf-1.2:description>The Shared System Certificates store contains certificates that
applications can access for a single certificate repository.
If enabled, Firefox can access that single system certificate
repository. If the DoD root certificate is also installed into
the shared system certificate repository, Firefox will see and 
use the DoD root certificate as a valid certificate authority.</xccdf-1.2:description>
          <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed" severity="medium">
            <xccdf-1.2:title>The DoD Root Certificate Exists</xccdf-1.2:title>
            <xccdf-1.2:description>The DoD root certificate should be installed in the Shared System Certificates store
for Firefox to be able to access the DoD certificate. To install the root certificated
into the Shared System Certificates store, copy the DoD root certificate into
<html:code>/etc/pki/ca-trust/source/anchors</html:code>. Once the file is copied, run the following
command:
<html:pre>$ sudo update-ca-trust extract</html:pre></xccdf-1.2:description>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000054</xccdf-1.2:reference>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5 (2)</xccdf-1.2:reference>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000016</xccdf-1.2:reference>
            <xccdf-1.2:rationale>The DOD root certificate will ensure that the trust chain is
established for server certificates issued from the DOD CA.</xccdf-1.2:rationale>
            <xccdf-1.2:ident system="https://nvd.nist.gov/cce/index.cfm">CCE-82056-3</xccdf-1.2:ident>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
          <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust" severity="medium">
            <xccdf-1.2:title>Enable Shared System Certificates</xccdf-1.2:title>
            <xccdf-1.2:description>The Shared System Certificates store makes NSS, GnuTLS, OpenSSL, and Java
share a default source for retrieving system certificate anchors and blacklist
information. Firefox has the capability of using this centralized store for its
CA certificates. If the Shared System Certificates store is disabled, it can
be enabled by running the following command:
<html:pre>$ sudo update-ca-trust enable</html:pre></xccdf-1.2:description>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000054</xccdf-1.2:reference>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-10</xccdf-1.2:reference>
            <xccdf-1.2:rationale>The DOD root certificate will ensure that the trust chain is
established for server certificates issued from the DOD CA.</xccdf-1.2:rationale>
            <xccdf-1.2:ident system="https://nvd.nist.gov/cce/index.cfm">CCE-82057-1</xccdf-1.2:ident>
            <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-enable_ca_trust">P11=$(readlink /etc/alternatives/libnssckbi.so*)
P11LIB="/usr/lib/pkcs11/p11-kit-trust.so"
P11LIB64="/usr/lib64/pkcs11/p11-kit-trust.so"

if ! [[ ${P11} == "${P11LIB64}" ]] || ! [[ ${P11} == "${P11LIB}" ]] ; then
   /usr/bin/update-ca-trust enable
fi
</xccdf-1.2:fix>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
        </xccdf-1.2:Group>
        <xccdf-1.2:Group id="xccdf_org.ssgproject.content_group_firefox_preferences-lock_settings">
          <xccdf-1.2:title>Prevent Users from Changing Firefox Configuration Settings</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox required security preferences cannot be changed by users.</xccdf-1.2:description>
          <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_config_file" severity="medium">
            <xccdf-1.2:title>Set Firefox Configuration File Location</xccdf-1.2:title>
            <xccdf-1.2:description>Specify the Firefox configuration file location by setting 
<html:code>general.config.filename</html:code> to the configuration (i.e. <html:code>mozilla.cfg</html:code>)
filename that contains the Firefox security preferences.</xccdf-1.2:description>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</xccdf-1.2:reference>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6</xccdf-1.2:reference>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF070</xccdf-1.2:reference>
            <xccdf-1.2:rationale>Locked settings prevents users from accessing about:config and changing
the security settings set by the system administrator.</xccdf-1.2:rationale>
            <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-lock_settings_config_file">

value="\"mozilla.cfg\""
firefox_js="local-settings.js"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"
firefox_pref="defaults/pref"
firefox_preferences="defaults/preferences"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Different versions of Firefox have different preferences directories, check for them and set the right one
        if [ -d "${firefox_dir}/${firefox_preferences}" ] ; then
            firefox_pref_dir="${firefox_dir}/${firefox_preferences}"
        elif [ -d "${firefox_dir}/${firefox_pref}" ] ; then
            firefox_pref_dir="${firefox_dir}/${firefox_pref}"
        else
            firefox_pref_dir="${firefox_dir}/${firefox_preferences}"
            mkdir -p "${firefox_pref_dir}"
            chmod 755 "${firefox_pref_dir}"
        fi

        # Make sure the Firefox .js file exists and has the appropriate permissions
        if ! [ -f "${firefox_pref_dir}/${firefox_js}" ] ; then
            touch "${firefox_pref_dir}/${firefox_js}"
            chmod 644 "${firefox_pref_dir}/${firefox_js}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^pref("general.config.filename", ' "${firefox_pref_dir}/${firefox_js}"; then
            
            sed -i 's/pref("general.config.filename".*/pref("general.config.filename", '"$value)"';/g' "${firefox_pref_dir}/${firefox_js}"
        else
            echo 'pref("general.config.filename", '"$value"');' &gt;&gt; "${firefox_pref_dir}/${firefox_js}"
        fi
    fi
done
</xccdf-1.2:fix>
            <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-lock_settings_config_file:def:1"/>
            </xccdf-1.2:check>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-lock_settings_config_file_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
          <xccdf-1.2:Rule selected="false" id="xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_obscure" severity="medium">
            <xccdf-1.2:title>Disable Firefox Configuration File ROT-13 Encoding</xccdf-1.2:title>
            <xccdf-1.2:description>Disable ROT-13 encoding by setting <html:code>general.config.obscure_value</html:code>
to <html:code>0</html:code>.</xccdf-1.2:description>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">ECSC-1</xccdf-1.2:reference>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">DTBF070</xccdf-1.2:reference>
            <xccdf-1.2:rationale>ROT-13 encoded prevents system adminstrators from easily configuring
and deploying Firefox configuration settings. It also prevents validating
settings easily from automated security tools.</xccdf-1.2:rationale>
            <xccdf-1.2:fix system="urn:xccdf:fix:script:sh" id="firefox_preferences-lock_settings_obscure">

value="0"
firefox_js="local-settings.js"
firefox_dirs="/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox"
firefox_pref="defaults/pref"
firefox_preferences="defaults/preferences"

# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    # If the Firefox directory exists, then Firefox is installed
    if [ -d "${firefox_dir}" ]; then
        # Different versions of Firefox have different preferences directories, check for them and set the right one
        if [ -d "${firefox_dir}/${firefox_preferences}" ] ; then
            firefox_pref_dir="${firefox_dir}/${firefox_preferences}"
        elif [ -d "${firefox_dir}/${firefox_pref}" ] ; then
            firefox_pref_dir="${firefox_dir}/${firefox_pref}"
        else
            firefox_pref_dir="${firefox_dir}/${firefox_preferences}"
            mkdir -p "${firefox_pref_dir}"
            chmod 755 "${firefox_pref_dir}"
        fi

        # Make sure the Firefox .js file exists and has the appropriate permissions
        if ! [ -f "${firefox_pref_dir}/${firefox_js}" ] ; then
            touch "${firefox_pref_dir}/${firefox_js}"
            chmod 644 "${firefox_pref_dir}/${firefox_js}"
        fi

        # If the key exists, change it. Otherwise, add it to the config_file.
        if LC_ALL=C grep -m 1 -q '^pref("general.config.obscure_value", ' "${firefox_pref_dir}/${firefox_js}"; then
            
            sed -i 's/pref("general.config.obscure_value".*/pref("general.config.obscure_value", '"$value)"';/g' "${firefox_pref_dir}/${firefox_js}"
        else
            echo 'pref("general.config.obscure_value", '"$value"');' &gt;&gt; "${firefox_pref_dir}/${firefox_js}"
        fi
    fi
done
</xccdf-1.2:fix>
            <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_preferences-lock_settings_obscure:def:1"/>
            </xccdf-1.2:check>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-lock_settings_obscure_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
        </xccdf-1.2:Group>
      </xccdf-1.2:Group>
    </xccdf-1.2:Benchmark>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-oval.xml" timestamp="2022-07-29T18:58:07">
    <oval-def:oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux linux-definitions-schema.xsd">
      <oval-def:generator>
        <oval:product_name>combine_ovals.py from SCAP Security Guide</oval:product_name>
        <oval:product_version>ssg: [0, 1, 63], python: 3.10.4</oval:product_version>
        <oval:schema_version>5.10</oval:schema_version>
        <oval:timestamp>2022-07-29T18:53:12</oval:timestamp>
      </oval-def:generator>
      <oval-def:definitions>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-addons_plugin_updates:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Addons Plugin Updates</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox automatically updates installed
      add-ons and plugins.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-addons_plugin_updates" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="addons plugin updates configured" test_ref="oval:ssg-test_firefox_preferences-addons_plugin_updates:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-auto-download_actions:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Automatic Downloads of MIME Types</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox automatically executes or downloads MIME types which are
      not authorized for auto-download.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-auto-download_actions" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Auto download actions of mime type is disabled" test_ref="oval:ssg-test_firefox_preferences-auto-download_actions:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-auto-update_of_firefox:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Auto-Update Capability</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox should not be able to automatically
      update itself.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-auto-update_of_firefox" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="auto-update is disabled" test_ref="oval:ssg-test_firefox_preferences-auto-update_of_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-autofill_forms:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Autofill Form Assistance</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox formfill assistance option is disabled.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-autofill_forms" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="autofill_forms disabled" test_ref="oval:ssg-test_firefox_preferences-autofill_forms:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-autofill_passwords:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable User Ability To Autofill Passwords</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox should not be configured to autofill passwords.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-autofill_passwords" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="autofill_passwords disabled" test_ref="oval:ssg-test_firefox_preferences-autofill_passwords:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-background_data:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Background Information Submission</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>There should be no background submission of technical and other information 
	  to Mozilla with portions posted publically.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-background_data" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="dataSubmission disabled" test_ref="oval:ssg-test_firefox_preferences-background_data:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-development_tools:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Development Tools</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox development tools are disabled.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-development_tools" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="development tools disabled" test_ref="oval:ssg-test_firefox_preferences-development_tools:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-home_page:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Default Firefox Home Page Configured</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The default homepage for Firefox is set and cannot be changed.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-home_page" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="home page configured" test_ref="oval:ssg-test_firefox_preferences-home_page:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-install_extensions:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Extension Installation</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox extensions install is disabled.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-install_extensions" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="xpinstall disabled" test_ref="oval:ssg-test_firefox_preferences-install_extensions:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-javascript_context_menus:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript Context Menus</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox should be configured to not allow JavaScript to
      disable or replace context menus.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-javascript_context_menus" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="disable javaScript context menus" test_ref="oval:ssg-test_firefox_preferences-javascript_context_menus:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-javascript_status_bar_changes:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript's Ability To Change The Status Bar</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox should be configured to not allow JavaScript to
      hide or change the status bar.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-javascript_status_bar_changes" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="disable hiding or changing status bar menus" test_ref="oval:ssg-test_firefox_preferences-javascript_status_bar_changes:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-javascript_status_bar_text:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript's Ability To Modify The Browser Appearance</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox should be configured not to allow JavaScript
      to change the status bar text.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-javascript_status_bar_text" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="disable changing the status bar text" test_ref="oval:ssg-test_firefox_preferences-javascript_status_bar_text:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-javascript_window_changes:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript's Raise Or Lower Windows Capability</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox should be configured to not allow JavaScript to
      raise or lower windows.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-javascript_window_changes" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="raise or lower windows disabled" test_ref="oval:ssg-test_firefox_preferences-javascript_window_changes:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-javascript_window_resizing:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript's Moving Or Resizing Windows Capability</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>FireFox should not be configured to allow JavaScript to move
      or resize windows.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-javascript_window_resizing" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="move or resize windows disabled" test_ref="oval:ssg-test_firefox_preferences-javascript_window_resizing:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-non-secure_page_warning:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable Non-Secure Page Warnings</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox is not configured to provide warnings when a user switches
      from a secure (SSL-enabled) to a non-secure page.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-non-secure_page_warning" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="non-secure page warning configured" test_ref="oval:ssg-test_firefox_preferences-non-secure_page_warning:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-open_confirmation:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable Downloading and Opening File Confirmation</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox is not configured to prompt user before downloading and
      opening required file types.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-open_confirmation" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="open_confirmation configured" test_ref="oval:ssg-test_firefox_preferences-open_confirmation:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-password_store:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable the Firefox Password Store</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The Firefox password store should be disabled.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-password_store" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="password_store disabled" test_ref="oval:ssg-test_firefox_preferences-password_store:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-pop-up_windows:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable Firefox Pop-up Blocker</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The Firefox Pop-up blocker should be enabled as windows may be
      used to launch an attack within a new browser window with altered settings.
      </oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-pop-up_windows" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="pop-up_windows installed" test_ref="oval:ssg-test_firefox_preferences-pop-up_windows:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-search_update:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Installed Search Plugins Update Checking</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Search plugins can be automatically configured to check for
      updates. Updates need to be controlled and installed from authorized and
      trusted servers.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-search_update" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Disable search plugin update capability" test_ref="oval:ssg-test_firefox_preferences-search_update:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-shell_protocol:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Access to Shell Protocols</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Firefox can be configured to access systems shells which
      could potentially allow Firefox and other users to access to the
      underlying system.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-shell_protocol" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Disable Firefox Shell Protocol Access" test_ref="oval:ssg-test_firefox_preferences-shell_protocol:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-ssl_protocol_tls:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable TLS Usage in Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Use of versions prior to TLS 1.1 are not permitted. 
	  SSL 2.0 and SSL 3.0 contain a number of security flaws. 
	  These versions must be disabled in compliance with the Network Infrastructure 
	  and Secure Remote Computing STIGs.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-ssl_protocol_tls" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Minimum TLS version is 2" test_ref="oval:ssg-test_firefox_preferences-ssl_protocol_tls_minimum:tst:1"/>
            <oval-def:criterion comment="Maximum TLS version is 4" test_ref="oval:ssg-test_firefox_preferences-ssl_protocol_tls_maximum:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-ssl_version_2:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable SSL Version 2.0 in Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>SSL 2.0 and SSL 3.0 contain a number of security flaws.
      Therefore, SSL 2.0 should be disabled.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-ssl_version_2" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="SSL 2.0 protocol disabled" test_ref="oval:ssg-test_firefox_preferences-ssl_version_2:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-ssl_version_3:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable SSL Version 3 in Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Earlier versions of SSL have known security vulnerabilities
      and are not authorized for use in DOD.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-ssl_version_3" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="SSL V3 installed" test_ref="oval:ssg-test_firefox_preferences-ssl_version_3:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-verification:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable Certificate Verification</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>When a web site asks for a certificate for user authentication, Firefox must be configured to have the user choose which certificate to present. Websites within DOD require user authentication for access which increases security for DoD information. Access will be denied to the user if certificate management is not configured</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-verification" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="verification installed" test_ref="oval:ssg-test_firefox_preferences-verification:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-installed_firefox_version_supported:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Supported Version of Firefox Installed</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Use of versions of an application which are not
      supported by the vendor are not permitted. Vendors respond to
      security flaws with updates and patches. These updates are not
      available for unsupported versions which can leave the application
      vulnerable to attack.</oval-def:description>
            <oval-def:reference ref_id="installed_firefox_version_supported" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="installed version of firefox supported" test_ref="oval:ssg-test_supported_version_of_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-cookies_clear:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Clear Cookies And Other Data When Firefox Closes</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Set browser preferences to perform a Clear Private Data
      operation when closing the browser in order to clear cookies and other
      data installed by websites visited during the session.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-cookies_clear" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="enabled sanitizeOnShutdown" test_ref="oval:ssg-test_firefox_preferences-cookies_shutdown_sanitize:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-cookies_user_notice:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable User Prompt For Clearing Cookies And Other Data</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Users should not be prompted about data and cookies being
      cleared when the browser is closed.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-cookies_user_notice" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="disable promptOnSanitize" test_ref="oval:ssg-test_firefox_preferences-cookies_sanitize_prompt:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-lock_settings_config_file:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Prevent Users from Changing Firefox Configuration Settings</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Locked settings prevents users from accessing about:config and
      changing the security settings set by the system administrator.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-lock_settings_config_file" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Configuration file is set" test_ref="oval:ssg-test_firefox_preferences-config_filename:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-lock_settings_obscure:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Prevent Users from Changing Firefox Configuration Settings</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Locked settings prevents users from accessing about:config and
      changing the security settings set by the system administrator.</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-lock_settings_obscure" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Do not obscure locked file content with ROT-13" test_ref="oval:ssg-test_firefox_preferences-obscure_value:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="inventory" id="oval:ssg-installed_app_is_firefox:def:1" version="2">
          <oval-def:metadata>
            <oval-def:title>Mozilla Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:reference ref_id="cpe:/a:mozilla:firefox" source="CPE"/>
            <oval-def:description>The application installed on the system is firefox.</oval-def:description>
            <oval-def:reference ref_id="installed_app_is_firefox" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND">
            <oval-def:extend_definition comment="Installed OS is part of the Unix family" definition_ref="oval:ssg-installed_OS_is_part_of_Unix_family:def:1"/>
            <oval-def:criterion comment="Firefox is installed" test_ref="oval:ssg-test_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-cryptomining:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enabled Firefox Cryptomining protection</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of privacy.trackingprotection.cryptomining.enabled in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-cryptomining" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-cryptomining:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-disable_ssl_weak_ciphers:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Weak Ciphers in Firefox SSL</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of security.ssl3.rsa_des_ede3_sha in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-disable_ssl_weak_ciphers" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-disable_ssl_weak_ciphers:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-enhanced_tracking:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enabled Firefox Enhanced Tracking Protection</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of browser.contentblocking.category in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-enhanced_tracking" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-enhanced_tracking:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-extension_recommendation:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disabled Firefox Extension Recommendations</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of extensions.htmlaboutaddons.recommendations.enabled in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-extension_recommendation" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-extension_recommendation:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-fingerprinting-protection:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enabled Firefox Fingerprinting Protection</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of privacy.trackingprotection.fingerprinting.enabled in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-fingerprinting-protection" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-fingerprinting-protection:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-telemetry-archive:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Telemetry Archive</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of toolkit.telemetry.archive.enabled in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-telemetry-archive" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-telemetry-archive:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_preferences-telemetry:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Telemetry</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of toolkit.telemetry.enabled in Firefox configuration</oval-def:description>
            <oval-def:reference ref_id="firefox_preferences-telemetry" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND" comment="Test conditions - Firefox configuration item is set and locked.">
            <oval-def:criterion comment="Check that Firefox configuration files have a set and locked configuration item." test_ref="oval:ssg-test_firefox_preferences-telemetry:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="inventory" id="oval:ssg-installed_OS_is_part_of_Unix_family:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Installed operating system is part of the Unix family</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The operating system installed on the system is part of the Unix OS family</oval-def:description>
            <oval-def:reference ref_id="installed_OS_is_part_of_Unix_family" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Installed operating system is part of the unix family" test_ref="oval:ssg-test_unix_family:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
      </oval-def:definitions>
      <oval-def:tests>
        <ind:textfilecontent54_test check="all" comment="Check for addons plugin updates" id="oval:ssg-test_firefox_preferences-addons_plugin_updates:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-addons_plugin_updates:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for Auto download Actions installed" id="oval:ssg-test_firefox_preferences-auto-download_actions:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-auto-download_actions:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check that auto-update of firefox is disabled" id="oval:ssg-test_firefox_preferences-auto-update_of_firefox:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-auto-update_of_firefox:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for autofill_forms disabled" id="oval:ssg-test_firefox_preferences-autofill_forms:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-autofill_forms:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for autofill_passwords disabled" id="oval:ssg-test_firefox_preferences-autofill_passwords:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-autofill_passwords:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for dataSubmission disabled" id="oval:ssg-test_firefox_preferences-background_data:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-background_data:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for development tools disabled" id="oval:ssg-test_firefox_preferences-development_tools:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-development_tools:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for home page configured" id="oval:ssg-test_firefox_preferences-home_page:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-home_page:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_preferences-home_page:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for xpinstall disabled" id="oval:ssg-test_firefox_preferences-install_extensions:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-install_extensions:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for disable javaScript context menu is disabled" id="oval:ssg-test_firefox_preferences-javascript_context_menus:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-javascript_context_menus:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check that hiding or changing status bar is disabled" id="oval:ssg-test_firefox_preferences-javascript_status_bar_changes:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-javascript_status_bar_changes:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check that changing the status bar text is disabled" id="oval:ssg-test_firefox_preferences-javascript_status_bar_text:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-javascript_status_bar_text:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="raise or lower windows is disabled" id="oval:ssg-test_firefox_preferences-javascript_window_changes:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-javascript_window_changes:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for move or resize windows disabled" id="oval:ssg-test_firefox_preferences-javascript_window_resizing:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-javascript_window_resizing:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for non-secure page warning configured" id="oval:ssg-test_firefox_preferences-non-secure_page_warning:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-non-secure_page_warning:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for open_confirmation configured" id="oval:ssg-test_firefox_preferences-open_confirmation:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-open_confirmation:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_preferences-open_confirmation:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check that the password_store is disabled" id="oval:ssg-test_firefox_preferences-password_store:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-password_store:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for pop-up_windows installed" id="oval:ssg-test_firefox_preferences-pop-up_windows:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-pop-up_windows:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check search plugin update capability is disabled" id="oval:ssg-test_firefox_preferences-search_update:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-search_update:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check that the hell_protocol is disabled" id="oval:ssg-test_firefox_preferences-shell_protocol:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-shell_protocol:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check if minimum TLS version is 2" id="oval:ssg-test_firefox_preferences-ssl_protocol_tls_minimum:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-ssl_protocol_tls_minimum:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check if maximum TLS version is 4" id="oval:ssg-test_firefox_preferences-ssl_protocol_tls_maximum:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-ssl_protocol_tls_maximum:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check SSL 2.0 protocol disabled" id="oval:ssg-test_firefox_preferences-ssl_version_2:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-ssl_version_2:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for SSL Version 3 preferences" id="oval:ssg-test_firefox_preferences-ssl_version_3:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-ssl_version_3:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Enable Certification verification" id="oval:ssg-test_firefox_preferences-verification:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-verification:obj:1"/>
        </ind:textfilecontent54_test>
        <linux:rpminfo_test check="all" check_existence="any_exist" comment="Installed version of firefox is greater than 68.4.0" id="oval:ssg-test_supported_version_of_firefox:tst:1" version="1">
          <linux:object object_ref="oval:ssg-obj_supported_version_of_firefox:obj:1"/>
          <linux:state state_ref="oval:ssg-state_supported_version_of_firefox:ste:1"/>
        </linux:rpminfo_test>
        <ind:textfilecontent54_test check="all" comment="Check for sanitizeOnShutdown enabled" id="oval:ssg-test_firefox_preferences-cookies_shutdown_sanitize:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-cookies_shutdown_sanitize:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for promptOnSanitize disabled" id="oval:ssg-test_firefox_preferences-cookies_sanitize_prompt:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-cookies_sanitize_prompt:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for configuration filename" id="oval:ssg-test_firefox_preferences-config_filename:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-config_filename:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check for obscure_value" id="oval:ssg-test_firefox_preferences-obscure_value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_firefox_preferences-obscure_value:obj:1"/>
        </ind:textfilecontent54_test>
        <linux:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Firefox is installed" id="oval:ssg-test_firefox:tst:1" version="1">
          <linux:object object_ref="oval:ssg-obj_firefox:obj:1"/>
        </linux:rpminfo_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'privacy.trackingprotection.cryptomining.enabled' in Firefox configuration" id="oval:ssg-test_firefox_preferences-cryptomining:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-cryptomining:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'security.ssl3.rsa_des_ede3_sha' in Firefox configuration" id="oval:ssg-test_firefox_preferences-disable_ssl_weak_ciphers:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-disable_ssl_weak_ciphers:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'browser.contentblocking.category' in Firefox configuration" id="oval:ssg-test_firefox_preferences-enhanced_tracking:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-enhanced_tracking:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'extensions.htmlaboutaddons.recommendations.enabled' in Firefox configuration" id="oval:ssg-test_firefox_preferences-extension_recommendation:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-extension_recommendation:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'privacy.trackingprotection.fingerprinting.enabled' in Firefox configuration" id="oval:ssg-test_firefox_preferences-fingerprinting-protection:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-fingerprinting-protection:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'toolkit.telemetry.archive.enabled' in Firefox configuration" id="oval:ssg-test_firefox_preferences-telemetry-archive:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-telemetry-archive:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of 'toolkit.telemetry.enabled' in Firefox configuration" id="oval:ssg-test_firefox_preferences-telemetry:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_preferences-telemetry:obj:1"/>
        </ind:textfilecontent54_test>
        <ind:family_test id="oval:ssg-test_unix_family:tst:1" check="all" check_existence="at_least_one_exists" comment="Test installed OS is part of the unix family" version="1">
          <ind:object object_ref="oval:ssg-object_unix_family:obj:1"/>
          <ind:state state_ref="oval:ssg-state_unix_family:ste:1"/>
        </ind:family_test>
      </oval-def:tests>
      <oval-def:objects>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-addons_plugin_updates:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("extensions.update.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-auto-download_actions:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("browser.helperApps.alwaysAsk.force",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-auto-update_of_firefox:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("app.update.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-autofill_forms:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("browser.formfill.enable",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-autofill_passwords:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("signon.autofillForms",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-background_data:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("datareporting.policy.dataSubmissionEnabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-development_tools:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("devtools.policy.disabled",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-home_page:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("browser.startup.homepage",[\s]+"(\S+)"\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-install_extensions:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("xpinstall.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-javascript_context_menus:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("dom.event.contextmenu.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-javascript_status_bar_changes:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("dom.disable_window_status_change",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-javascript_status_bar_text:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("dom.disable_window_open_feature.status",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-javascript_window_changes:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("dom.disable_window_flip",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-javascript_window_resizing:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("dom.disable_window_move_resize",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-non-secure_page_warning:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.warn_leaving_secure",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-open_confirmation:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("plugin.disable_full_page_plugin_for_types",[\s]+"(\S+)"\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-password_store:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("signon.rememberSignons",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-pop-up_windows:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("dom.disable_window_open_feature.status",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-search_update:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("browser.search.update",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-shell_protocol:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("network.protocol-handler.external.shell",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-ssl_protocol_tls_minimum:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.tls.version.min",[\s]+2\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-ssl_protocol_tls_maximum:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.tls.version.max",[\s]+4\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-ssl_version_2:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.enable_ssl2",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-ssl_version_3:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.enable_ssl3",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-verification:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.default_personal_cert",[\s]+"Ask Every Time"\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <linux:rpminfo_object id="oval:ssg-obj_supported_version_of_firefox:obj:1" version="1">
          <linux:name>firefox</linux:name>
        </linux:rpminfo_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-cookies_shutdown_sanitize:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("privacy.sanitize.sanitizeOnShutdown",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-cookies_sanitize_prompt:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("privacy.sanitize.promptOnSanitize",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-config_filename:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox\/defaults\/preferences</ind:path>
          <ind:filename operation="pattern match">^local-settings.js$</ind:filename>
          <ind:pattern operation="pattern match">^pref\("general.config.filename",[\s]+"(\S+)\.cfg"\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-object_firefox_preferences-obscure_value:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox\/defaults\/preferences</ind:path>
          <ind:filename operation="pattern match">^local-settings.js$</ind:filename>
          <ind:pattern operation="pattern match">^pref\("general.config.obscure_value",[\s]+0\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <linux:rpminfo_object id="oval:ssg-obj_firefox:obj:1" version="1">
          <linux:name>firefox</linux:name>
        </linux:rpminfo_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-cryptomining:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("privacy.trackingprotection.cryptomining.enabled",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-disable_ssl_weak_ciphers:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("security.ssl3.rsa_des_ede3_sha",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-enhanced_tracking:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("browser.contentblocking.category",[\s]+strict\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-extension_recommendation:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("extensions.htmlaboutaddons.recommendations.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-fingerprinting-protection:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("privacy.trackingprotection.fingerprinting.enabled",[\s]+true\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-telemetry-archive:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("toolkit.telemetry.archive.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_preferences-telemetry:obj:1" version="1">
          <ind:path operation="pattern match">^\/usr\/(|local\/)lib(|64)\/firefox</ind:path>
          <ind:filename operation="pattern match">^.*\.cfg$</ind:filename>
          <ind:pattern operation="pattern match">^lockPref\("toolkit.telemetry.enabled",[\s]+false\);$</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:family_object id="oval:ssg-object_unix_family:obj:1" version="1"/>
      </oval-def:objects>
      <oval-def:states>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_preferences-home_page:ste:1" version="1">
          <ind:subexpression datatype="string" operation="equals" var_check="all" var_ref="oval:ssg-var_default_home_page:var:1"/>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_preferences-open_confirmation:ste:1" version="1">
          <ind:subexpression operation="equals" var_check="all" var_ref="oval:ssg-var_required_file_types:var:1"/>
        </ind:textfilecontent54_state>
        <linux:rpminfo_state id="oval:ssg-state_supported_version_of_firefox:ste:1" version="1">
          <linux:evr operation="greater than" datatype="evr_string">68.4.0</linux:evr>
        </linux:rpminfo_state>
        <ind:family_state id="oval:ssg-state_unix_family:ste:1" version="1">
          <ind:family>unix</ind:family>
        </ind:family_state>
      </oval-def:states>
      <oval-def:variables>
        <oval-def:external_variable id="oval:ssg-var_default_home_page:var:1" datatype="string" version="1" comment="Expected default home page"/>
        <oval-def:external_variable id="oval:ssg-var_required_file_types:var:1" datatype="string" version="1" comment="Expected file types"/>
      </oval-def:variables>
    </oval-def:oval_definitions>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-ocil.xml" timestamp="2022-07-29T18:58:06">
    <ocil:ocil>
      <ocil:generator>
        <ocil:product_name>build_shorthand.py from SCAP Security Guide</ocil:product_name>
        <ocil:product_version>ssg: 0.1.63</ocil:product_version>
        <ocil:schema_version>2.0</ocil:schema_version>
        <ocil:timestamp>2022-07-29T18:56:41</ocil:timestamp>
      </ocil:generator>
      <ocil:questionnaires>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-autofill_passwords_ocil:questionnaire:1">
          <ocil:title>Disable User Ability To Autofill Passwords</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-autofill_passwords_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-ssl_version_2_ocil:questionnaire:1">
          <ocil:title>Disable SSL Version 2.0 in Firefox</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-ssl_version_2_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-javascript_status_bar_changes_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript's Ability To Change The Status Bar</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-javascript_status_bar_changes_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-enhanced_tracking_ocil:questionnaire:1">
          <ocil:title>Enabled Firefox Enhanced Tracking Protection</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-enhanced_tracking_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-ssl_version_3_ocil:questionnaire:1">
          <ocil:title>Disable SSL Version 3.0 in Firefox</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-ssl_version_3_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-background_data_ocil:questionnaire:1">
          <ocil:title>Disable Background Information Submission</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-background_data_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-javascript_context_menus_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript Context Menus</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-javascript_context_menus_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-install_extensions_ocil:questionnaire:1">
          <ocil:title>Disable Extension Installation</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-install_extensions_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-addons_plugin_updates_ocil:questionnaire:1">
          <ocil:title>Disable Addons Plugin Updates</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-addons_plugin_updates_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1">
          <ocil:title>Enable Shared System Certificates</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-enable_ca_trust_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-shell_protocol_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Access to Shell Protocols</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-shell_protocol_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-search_update_ocil:questionnaire:1">
          <ocil:title>Disable Installed Search Plugins Update Checking</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-search_update_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1">
          <ocil:title>Supported Version of Firefox Installed</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-installed_firefox_version_supported_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-telemetry-archive_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Telemetry Archive</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-telemetry-archive_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-lock_settings_config_file_ocil:questionnaire:1">
          <ocil:title>Set Firefox Configuration File Location</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-lock_settings_config_file_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-password_store_ocil:questionnaire:1">
          <ocil:title>Disable the Firefox Password Store</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-password_store_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-fingerprinting-protection_ocil:questionnaire:1">
          <ocil:title>Enabled Firefox Fingerprinting Protection</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-fingerprinting-protection_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1">
          <ocil:title>The DoD Root Certificate Exists</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-dod_root_certificate_installed_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-development_tools_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Development Tools</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-development_tools_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-open_confirmation_ocil:questionnaire:1">
          <ocil:title>Enable Downloading and Opening File Confirmation</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-open_confirmation_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-verification_ocil:questionnaire:1">
          <ocil:title>Enable Certificate Verification</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-verification_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-javascript_window_resizing_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript's Moving Or Resizing Windows Capability</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-javascript_window_resizing_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1">
          <ocil:title>Disable Automatic Downloads of MIME Types</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-auto-download_actions_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-telemetry_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Telemetry</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-telemetry_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-autofill_forms_ocil:questionnaire:1">
          <ocil:title>Disable Autofill Form Assistance</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-autofill_forms_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-disable_ssl_weak_ciphers_ocil:questionnaire:1">
          <ocil:title>Disable Weak Ciphers in Firefox SSL</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-disable_ssl_weak_ciphers_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-non-secure_page_warning_ocil:questionnaire:1">
          <ocil:title>Enable Non-Secure Page Warnings</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-non-secure_page_warning_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-cryptomining_ocil:questionnaire:1">
          <ocil:title>Enabled Firefox Cryptomining protection</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-cryptomining_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-extension_recommendation_ocil:questionnaire:1">
          <ocil:title>Disabled Firefox Extension Recommendations</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-extension_recommendation_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-ssl_protocol_tls_ocil:questionnaire:1">
          <ocil:title>Enable TLS Usage in Firefox</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-ssl_protocol_tls_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-cookies_clear_ocil:questionnaire:1">
          <ocil:title>Clear Data When Firefox Closes</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-cookies_clear_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-javascript_window_changes_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript's Raise Or Lower Windows Capability</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-javascript_window_changes_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-cookies_user_notice_ocil:questionnaire:1">
          <ocil:title>Disable User Prompt When Data Is Cleared</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-cookies_user_notice_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-pop-up_windows_ocil:questionnaire:1">
          <ocil:title>Enable Firefox Pop-up Blocker</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-pop-up_windows_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-auto-update_of_firefox_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Auto-Update Capability</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-auto-update_of_firefox_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-home_page_ocil:questionnaire:1">
          <ocil:title>Default Firefox Home Page Configured</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-home_page_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-javascript_status_bar_text_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript's Ability To Modify The Browser Appearance</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-javascript_status_bar_text_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-lock_settings_obscure_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Configuration File ROT-13 Encoding</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-lock_settings_obscure_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
      </ocil:questionnaires>
      <ocil:test_actions>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-autofill_passwords_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-autofill_passwords_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-ssl_version_2_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-ssl_version_2_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-javascript_status_bar_changes_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-javascript_status_bar_changes_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-enhanced_tracking_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-enhanced_tracking_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-ssl_version_3_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-ssl_version_3_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-background_data_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-background_data_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-javascript_context_menus_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-javascript_context_menus_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-install_extensions_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-install_extensions_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-addons_plugin_updates_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-addons_plugin_updates_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-enable_ca_trust_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-enable_ca_trust_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-shell_protocol_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-shell_protocol_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-search_update_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-search_update_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-installed_firefox_version_supported_action:testaction:1" question_ref="ocil:ssg-installed_firefox_version_supported_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-telemetry-archive_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-telemetry-archive_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-lock_settings_config_file_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-lock_settings_config_file_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-password_store_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-password_store_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-fingerprinting-protection_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-fingerprinting-protection_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-dod_root_certificate_installed_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-dod_root_certificate_installed_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-development_tools_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-development_tools_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-open_confirmation_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-open_confirmation_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-verification_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-verification_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-javascript_window_resizing_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-javascript_window_resizing_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-auto-download_actions_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-auto-download_actions_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-telemetry_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-telemetry_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-autofill_forms_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-autofill_forms_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-disable_ssl_weak_ciphers_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-disable_ssl_weak_ciphers_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-non-secure_page_warning_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-non-secure_page_warning_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-cryptomining_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-cryptomining_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-extension_recommendation_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-extension_recommendation_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-ssl_protocol_tls_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-ssl_protocol_tls_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-cookies_clear_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-cookies_clear_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-javascript_window_changes_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-javascript_window_changes_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-cookies_user_notice_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-cookies_user_notice_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-pop-up_windows_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-pop-up_windows_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-auto-update_of_firefox_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-auto-update_of_firefox_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-home_page_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-home_page_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-javascript_status_bar_text_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-javascript_status_bar_text_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-lock_settings_obscure_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-lock_settings_obscure_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
      </ocil:test_actions>
      <ocil:questions>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-autofill_passwords_question:question:1">
          <ocil:question_text>To verify that password autofill is disabled,
run the following command:
$ grep 'signon.autofillForms' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("signon.autofillForms", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-ssl_version_2_question:question:1">
          <ocil:question_text>To verify that SSL version 2.0 is disabled,
run the following command:
$ grep 'security.enable_ssl2' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("security.enable_ssl2", "false");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-javascript_status_bar_changes_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change the status bar,
run the following command:
$ grep 'dom.disable_window_status_change' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("dom.disable_window_status_change", "true");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-enhanced_tracking_question:question:1">
          <ocil:question_text>
To verify the correct setting of {{preference}},

run the following command:
$ grep '{{config}}' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("{{config}}", "{{value}}");
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-ssl_version_3_question:question:1">
          <ocil:question_text>To verify that SSL version 3 is disabled,
run the following command:
$ grep 'security.enable_ssl3' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("security.enable_ssl3", "false");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-background_data_question:question:1">
          <ocil:question_text>To verify that data submission is disabled,
run the following command:
$ grep 'datareporting.policy.dataSubmissionEnabled' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("datareporting.policy.dataSubmissionEnabled", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-javascript_context_menus_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change context menus,
run the following command:
$ grep 'dom.event.contextmenu.enabled' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("dom.event.contextmenu.enabled", "false");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-install_extensions_question:question:1">
          <ocil:question_text>To verify that the installation of extensions is disabled,
run the following command:
$ grep 'xpinstall.enabled' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("xpinstall.enabled", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-addons_plugin_updates_question:question:1">
          <ocil:question_text>To verify that add-ons and plugins cannot automatically update,
run the following command:
$ grep 'extensions.update.enabled' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("extensions.update.enabled", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-enable_ca_trust_question:question:1">
          <ocil:question_text>To verify that the central system cerificate authority store is enabled,
run the following command:
$ ls -l /etc/alternatives/libnssckbi.so.x86_64
The output should return something similar to:
lrwxrwxrwx. 1 root root 34 Apr 30 09:19 /etc/alternatives/libnssckbi.so.x86_64 -&gt; /usr/lib64/pkcs11/p11-kit-trust.so
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-shell_protocol_question:question:1">
          <ocil:question_text>To verify that the shell protocol access is disabled,
run the following command:
$ grep 'network.protocol-handler.external.shell' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("network.protocol-handler.external.shell", "false");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-search_update_question:question:1">
          <ocil:question_text>To verify that search plugins cannot automatically update,
run the following command:
$ grep 'browser.search.update' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("browser.search.update", "false");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-installed_firefox_version_supported_question:question:1">
          <ocil:question_text>If the system is joined to the Red Hat Network, a Red Hat Satellite Server, or
a yum server which provides updates, invoking the following command will
indicate if updates are available:
$ sudo yum check-update
If the system is not configured to update from one of these sources,
run the following command to list when each package was last updated:
$ rpm -qa -last
Compare this to Red Hat Security Advisories (RHSA) listed at

    https://access.redhat.com/security/updates/active/
to determine if the system is missing applicable updates.
      Is it the case that it is not updated?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-telemetry-archive_question:question:1">
          <ocil:question_text>To verify that telemetry archive is disabled,
run the following command:
$ grep 'toolkit.telemetry.archive.enabled' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("toolkit.telemetry.archive.enabled", "false");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-lock_settings_config_file_question:question:1">
          <ocil:question_text>To verify that configuration filename is set, run the following command:
$ grep 'filename' FIREFOX_INSTALL_DIR/defaults/preferences/*.js
The output should return something similar to:
pref("general.config.filename", "mozilla.cfg");
      Is it the case that users can change mandatory settings?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-password_store_question:question:1">
          <ocil:question_text>To verify that the password store is disabled,
run the following command:
$ grep 'signon.rememberSignons' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("signon.rememberSignons", "false");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-fingerprinting-protection_question:question:1">
          <ocil:question_text>To verify that {{preference}} is enabled,
run the following command:
$ grep '{{config}}' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("{{config}}", "{{value}}");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-dod_root_certificate_installed_question:question:1">
          <ocil:question_text>To verify that the DoD root certificate is installed,
list all certificates in /etc/pki/ca-trust/source/anchors
and compare them to the DoD root certificate. If there is a match
to the DoD root certificate, then the DoD root certificate is 
installed.
      Is it the case that it is not installed?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-development_tools_question:question:1">
          <ocil:question_text>To verify that Autofill Form Assistance is disabled,
run the following command:
$ grep 'devtools.policy.disabled' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("devtools.policy.disabled", true);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-open_confirmation_question:question:1">
          <ocil:question_text>To verify that downloading and opening file confirmation is enabled,
run the following command:
$ grep 'plugin.disable_full_page_plugin_for_types' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("plugin.disable_full_page_plugin_for_types", "");
      Is it the case that it is not set or application listing is incorrect?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-verification_question:question:1">
          <ocil:question_text>To verify that certificate verification is enabled, run the following command:
$ grep 'security.default_personal_cert' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("security.default_personal_cert", "Ask Every Time");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-javascript_window_resizing_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change windows sizing,
run the following command:
$ grep 'dom.disable_window_move_resize' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("dom.disable_window_move_resize", "true");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-auto-download_actions_question:question:1">
          <ocil:question_text>To verify that user interaction is required for the downloading of MIME types,
run the following command:
$ grep 'browser.helperApps.alwaysAsk.force' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("browser.helperApps.alwaysAsk.force", "true");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-telemetry_question:question:1">
          <ocil:question_text>To verify that {{preference}} is enabled,
run the following command:
$ grep '{{config}}' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("{{config}}", "{{value}}");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-autofill_forms_question:question:1">
          <ocil:question_text>To verify that Autofill Form Assistance is disabled,
run the following command:
$ grep 'browser.formfill.enable' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("browser.formfill.enable", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-disable_ssl_weak_ciphers_question:question:1">
          <ocil:question_text>
To verify that {{preference}} is disabled,

run the following command:
$ grep '{{config}}' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("{{config}}", "{{value}}");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-non-secure_page_warning_question:question:1">
          <ocil:question_text>To verify that non-secure page warnings are enabled,
run the following command:
$ grep 'security.warn_leaving_secure' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("security.warn_leaving_secure", "true");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-cryptomining_question:question:1">
          <ocil:question_text>To verify that {{preference}} is enabled,
run the following command:
$ grep '{{config}}' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("{{config}}", "{{value}}");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-extension_recommendation_question:question:1">
          <ocil:question_text>
To verify that {{preference}} is disabled,

run the following command:
$ grep '{{config}}' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("{{config}}", "{{value}}");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-ssl_protocol_tls_question:question:1">
          <ocil:question_text>To verify that TLS is enabled, run the following commands:
$ grep 'security.tls.version.min' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("security.tls.version.min", "2");
$ grep 'security.tls.version.max' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("security.tls.version.max", "4");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-cookies_clear_question:question:1">
          <ocil:question_text>To verify that Firefox clears data on exit,
run the following command:
$ grep 'privacy.sanitize.sanitizeOnShutdown' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("privacy.sanitize.sanitizeOnShutdown", true);
      Is it the case that it is not set to clear?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-javascript_window_changes_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change windows sizing,
run the following command:
$ grep 'dom.disable_window_flip' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("dom.disable_window_flip", "true");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-cookies_user_notice_question:question:1">
          <ocil:question_text>To verify that Firefox does not prompt users about data being cleared,
run the following command:
$ grep 'privacy.sanitize.promptOnSanitize' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("privacy.sanitize.promptOnSanitize", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-pop-up_windows_question:question:1">
          <ocil:question_text>To verify that pop-up blocker is enabled,
run the following command:
$ grep 'dom.disable_window_open_feature.status' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("dom.disable_window_open_feature.status", "true");
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-auto-update_of_firefox_question:question:1">
          <ocil:question_text>To verify that Firefox cannot auto-update,
run the following command:
$ grep 'app.update.enable' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("app.update.enable", false);
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-home_page_question:question:1">
          <ocil:question_text>To verify that default home page is set,
run the following command:
$ grep 'browser.startup.homepage' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("browser.startup.homepage", "");
      Is it the case that it is not configured?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-javascript_status_bar_text_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change the browser appearance,
run the following command:
$ grep 'dom.disable_window_open_feature.status' FIREFOX_INSTALL_DIR/*.cfg
The output should return:
lockPref("dom.disable_window_open_feature.status", "true");
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-lock_settings_obscure_question:question:1">
          <ocil:question_text>To verify that ROT-13 encoding is disabled, run the following command:
$ grep 'obscure_value' FIREFOX_INSTALL_DIR/defaults/preferences/*.js
The output should return something similar to:
pref("general.config.obscure_value", 0);
      Is it the case that users can change mandatory settings?
      </ocil:question_text>
        </ocil:boolean_question>
      </ocil:questions>
    </ocil:ocil>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-cpe-oval.xml" timestamp="2022-07-29T18:57:41">
    <oval-def:oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux linux-definitions-schema.xsd">
      <oval-def:generator>
        <oval:product_name>combine_ovals.py from SCAP Security Guide</oval:product_name>
        <oval:product_version>ssg: [0, 1, 63], python: 3.10.4</oval:product_version>
        <oval:schema_version>5.10</oval:schema_version>
        <oval:timestamp>2022-07-29T18:53:12</oval:timestamp>
      </oval-def:generator>
      <oval-def:definitions>
        <oval-def:definition class="inventory" id="oval:ssg-installed_app_is_firefox:def:1" version="2">
          <oval-def:metadata>
            <oval-def:title>Mozilla Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:reference ref_id="cpe:/a:mozilla:firefox" source="CPE"/>
            <oval-def:description>The application installed on the system is firefox.</oval-def:description>
          </oval-def:metadata>
          <oval-def:criteria operator="AND">
            <oval-def:extend_definition comment="Installed OS is part of the Unix family" definition_ref="oval:ssg-installed_OS_is_part_of_Unix_family:def:1"/>
            <oval-def:criterion comment="Firefox is installed" test_ref="oval:ssg-test_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="inventory" id="oval:ssg-installed_OS_is_part_of_Unix_family:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Installed operating system is part of the Unix family</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The operating system installed on the system is part of the Unix OS family</oval-def:description>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Installed operating system is part of the unix family" test_ref="oval:ssg-test_unix_family:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
      </oval-def:definitions>
      <oval-def:tests>
        <linux:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Firefox is installed" id="oval:ssg-test_firefox:tst:1" version="1">
          <linux:object object_ref="oval:ssg-obj_firefox:obj:1"/>
        </linux:rpminfo_test>
        <ind:family_test id="oval:ssg-test_unix_family:tst:1" check="all" check_existence="at_least_one_exists" comment="Test installed OS is part of the unix family" version="1">
          <ind:object object_ref="oval:ssg-object_unix_family:obj:1"/>
          <ind:state state_ref="oval:ssg-state_unix_family:ste:1"/>
        </ind:family_test>
      </oval-def:tests>
      <oval-def:objects>
        <linux:rpminfo_object id="oval:ssg-obj_firefox:obj:1" version="1">
          <linux:name>firefox</linux:name>
        </linux:rpminfo_object>
        <ind:family_object id="oval:ssg-object_unix_family:obj:1" version="1"/>
      </oval-def:objects>
      <oval-def:states>
        <ind:family_state id="oval:ssg-state_unix_family:ste:1" version="1">
          <ind:family>unix</ind:family>
        </ind:family_state>
      </oval-def:states>
    </oval-def:oval_definitions>
  </ds:component>
</ds:data-stream-collection>
